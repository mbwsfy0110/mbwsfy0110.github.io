<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python基础知识</title>
    <url>/2022/10/30/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>1、python一行中读入多个数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a, b = input().split();</span><br><span class="line">a, b = map(int, input.split()) //指定a, b数据类型时可以使用</span><br></pre></td></tr></table></figure>
<p>2、python输出同时包含整形和字符串<br>使用str()函数将数字转成字符串使用<br>3、python输出浮点数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&quot;%.2f&quot; %(c))      #其中，c为变量 （方式1）</span><br><span class="line">print(&quot;&#123;:.2f&#125;&quot;.format(c))  #其中，c为变量（方式2）</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>关于未来的期待</title>
    <url>/2022/11/22/%E5%85%B3%E4%BA%8E%E6%9C%AA%E6%9D%A5%E7%9A%84%E6%9C%9F%E5%BE%85/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="92bce2e965abd7971ed7394d4302b2127231c598cc14d0e8b4f355fb8a174613">7763ba0d8906c78f6d10e0023d32f7d54baa89699a16943625f664728f9178c3300ca2ee83c9a502a8db8fc5350c10a2e0ab120f9c05727c7cc7f81fe69bb97417e12f285ba6b80f2d8627072e0bbd58d8427cced3755b9a3640ea90fa80b122fbb0f0b37a34426173dd5d4b569b5841358a91b0f8b46e6f37854b81961dbe1ed155ddf091242558dd123b2e52c6fb63ac244a6836de06f98b7388a326e9d7b4f3a3a0084825c7263f73384ca56d9c79119b4b892e082b90e00b3999c5ea5ba08a6d7ecadf07a7517362fb20ce25841ec0327ae5a09f9592126882d2e251bc94bb39fceccc51f82ea05502b0e621504c602de4a425aacc5eb604c3bc342e0524a3c50fa8a657efb1e4816987cfe2844e1592a8b66a4f5cdca24ef3ab370c76ed0abdf4300c1aba4be3af3cf138eaffbe683bdf054958b2cce14246eba5de049e052ee20fa97b1b6ecf2efce1d51e095fc880bcebaa0c6c438e3a76e8fb49c691e91ac185f52352b3914c76008186dbe1983086ca2a6bef97ef3dcd41ae2f0b636c5993549c0cf0e9a82b1c3cb61880a717a1bd144af6611ee25a5946300e89faade23d3be9c8f2684ed8e12b744e8a68b1e367fa15171b72db793120977739ef643562a450a1fa33b1605e042c0438ba0fc49dd778c0ceb9a6b4f4326148e50fadcef0bffa4194370c3155ed319754f595a4547b1c0a2762c984e0035d31d6b6bbb8c660b663dfcbcbd2a47e543b9e75f3fb93ef7b51478670e0f0533da46e1a2168b72454e6c781b06a5b459370138d415b7ea4ee2b670501f5dc6bdc0ee26854af5ab9930b6fe1d043dce37fc4fda04c926dddbe53b2a8b233d4e538be56b8</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>下一件事情</title>
    <url>/2022/10/03/%E4%B8%8B%E4%B8%80%E4%BB%B6%E4%BA%8B%E6%83%85/</url>
    <content><![CDATA[<p><img src="https://user-images.githubusercontent.com/99975690/193596772-29a32b3a-9baa-4dc2-a718-9c1a37c6163a.jpg" alt="v2-10fb0670c436035f9a97611cb03fdf9c_1440w" loading="lazy"></p>
<table>
<thead>
<tr>
<th>序号</th>
<th>to do list</th>
<th>完成时间</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>给博客增加评论区功能</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>改变代码样式（感觉博客自带对代码爱好者来说不是很友好）</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>更改文章下方博客链接（感觉有点没必要且链接太长有点丑）</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>一键复制功能给加上</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>学习一下markdown的一些语法（好多忘了，用到才去查）</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>学习一下子分类是怎么用的</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>文章密码保护</td>
<td>2022-10-05</td>
</tr>
<tr>
<td>8</td>
<td>博客在线编辑</td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>实现博客托管</td>
<td></td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>编译原理作业及相关知识点</title>
    <url>/2022/10/05/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%BD%9C%E4%B8%9A%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h3 id="第四章作业及相关知识点"><a href="#第四章作业及相关知识点" class="headerlink" title=" 第四章作业及相关知识点 "></a><font color=#008000> 第四章作业及相关知识点 </font></h3><h4 id="一、第一题知识点"><a href="#一、第一题知识点" class="headerlink" title="一、第一题知识点"></a>一、第一题知识点</h4><h5 id="1、消除左递归"><a href="#1、消除左递归" class="headerlink" title="1、消除左递归"></a><strong>1、消除左递归</strong></h5><p>$P → Pα｜β$等价于$P→βP’（P’$为新增加的非终结符$）, P’→αP’｜ε$</p>
<h5 id="2、判断一个上下文无关文法是-LL-1-文法"><a href="#2、判断一个上下文无关文法是-LL-1-文法" class="headerlink" title="2、判断一个上下文无关文法是$LL(1)$文法"></a><strong>2、判断一个上下文无关文法是$LL(1)$文法</strong></h5><p>一个上下文无关文法是LL(1)文法的充分必要条件是，对每个非终结符的两个不同的产生式，$A→α，A→β$，满足：$SELECT(A→α)∩SELECT(A→β)&#x3D; φ$</p>
<h5 id="3、求-select-集"><a href="#3、求-select-集" class="headerlink" title="3、求$select$集"></a><strong>3、求$select$集</strong></h5><p>设$G&#x3D;(Ｖ_T，Ｖ_N，S，P） α∈Ｖ* $<br>$FIRST(α)&#x3D;{a|α&#x3D;&#x3D;<em>&gt; aβ，a∈Ｖ_T}$<br>若$α&#x3D;&#x3D;</em>&gt;ε$，则$SELECT(A→α)&#x3D; FIRST(α)$<br>若$α&#x3D;&#x3D;*&gt;ε$，则$SELECT(A→α) &#x3D; (FIRST(α)-{ε})∪FOLLOW(A)$</p>
<h5 id="4、求-first-集"><a href="#4、求-first-集" class="headerlink" title="4、求$first$集"></a><strong>4、求$first$集</strong></h5><p>设$G&#x3D;(Ｖ_T，Ｖ_N，S，P） α∈Ｖ* $<br>$FIRST(α)&#x3D;{a|α&#x3D;&#x3D;<em>&gt; aβ，a∈Ｖ_T}$<br>若$α&#x3D;&#x3D;</em>&gt;ε，则ε∈FIRST(α)$<br>$FIRST(α)$是$α$的所有可能推导的首遇终结符号或ε，是选择产生式的依据。</p>
<h5 id="5、求-follow-集"><a href="#5、求-follow-集" class="headerlink" title="5、求$follow$集"></a><strong>5、求$follow$集</strong></h5><p>$A∈Ｖ_N$<br>$FOLLOW(A)&#x3D;{ a｜S&#x3D;&#x3D;<em>&gt;…Aa…，a∈Ｖ_T }$<br>若$S&#x3D;&#x3D;</em>&gt;…A$，则#$∈FOLLOW（A）$<br>‘#’—输入串的结束符 也可看作是句子的括号 #S#<br>$FOLLOW(A)$表示了句型中可能紧跟在$A$后面的终结符号</p>
<h5 id="6、构造预测分析表"><a href="#6、构造预测分析表" class="headerlink" title="6、构造预测分析表"></a><strong>6、构造预测分析表</strong></h5><p>设有文法$G$，预测分析表构造过程：</p>
<ul>
<li>计算所有候选式$α$的首符集 $FIRST（α）$</li>
<li>计算所有非终结符A的后继符集$FOLLOW（A）$</li>
<li>计算所有产生式的$SELECT(A→α)$集合</li>
<li>构造预测分析表  $M$</li>
</ul>
<h5 id="7、根据分析表对输入串进行分析"><a href="#7、根据分析表对输入串进行分析" class="headerlink" title="7、根据分析表对输入串进行分析"></a><strong>7、根据分析表对输入串进行分析</strong></h5>]]></content>
      <tags>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>再见了，两年的acm生活</title>
    <url>/2022/10/08/%E5%86%8D%E8%A7%81%E4%BA%86%EF%BC%8C%E4%B8%A4%E5%B9%B4%E7%9A%84acm%E7%94%9F%E6%B4%BB/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="963fca48213a3b4cc13eb32a7ab706e1ca52a8d793022823ea1dd314e49c8399">f818c953540b4c9e52799c207375f4a9e51ec0d6f2b5c5feeb02f39cdc4318fc2a9783ca351c6c35593f243fb9937cb796409028c5e90a718e3b67a7d625d966a8947410ccb721e2a206ca7048f2307d0b8b073f10be40ec73f917fb991c8a5782c1351bccda9745f7624562cc2dbe6269b3bc7943d00d105064dca6dc6f907c789d4dcd1339eec717c23ee195b41687ecb0bd861a54b98e10b63c1695c71cecdde41465736da5bff6c3eefbe13057ca4b584ae5ea018d7cf9a8aa57b041eb284a4dc2ad222d7744b6d8bd4f00b53297ab354e6eddf104d63c711a219e3255e55d601b3b26d7827359db75631a665edceb70fd9481be148e0193bb6cf51e6750509ec59963f676f6c8ae775b8fc282dfdcdc11993e660c7fb6c2e93f96c6ad247cc66bd1ad4de1f54729be132ecea876f0a6856bbe0c08fc81ec66aae3c482e946065ad28ff658c476a6e06d916386b57376f3d58ed1fb6e5c52c60ffcd4caee7cb17ae95c48805b29dfdf7dfbc4eda78089b76ce3e3310008da000d2ad501c62345dd49d4be32e40ee2bcdfb169490ca65da94c0d2b28a6a5cb70a19c9c6058de94630da7b8bbc07ce34e6c9f633be7fb67d5889bc4e063911a0951189a8dadcc9259d2e11a14bbc6c1d0951c81e17390d000102c60562fe3d6a4125882acc374288e2bc9a998674bf2767c1e485c50de984f739af80e8c60befc5c3c8ef3f86f4b627406192805c8aeb44d1a8232247f2b0cc429a0722cf30e23b89777b4669115699a1c5f2441e11fb5e4c21b82e73d81e3c7fe23164253d58f6c63cfdbe3857c585930fcc2190126c517181e4f64e1028bbd99cc8dc46358b9359e198439e614a3bdc2bc7a2c98aafd73857e29b384526721253e978001938f2c116cbda17ac874af96e77fb856dc589eca716011fa6070c2cc243d3f8304d61dd564d4acd11b56a348637186266a92f5dc35dd642fa1cf10c5ad8c139964fec5792e68be2bd90d599dbf07383299a337e38fa764f328df288ee3d2710f765ccf466bc01cad6ec34bd9a9fc6fc1bb0dafeaf8d0c4b55ec9956bd9aa82c76333b22df5e19e86470da8243c7c36489db8cb15b17c87a5eb45967e84d88c86a7274e3d55c32ea6306fc7911a52127aad2502ae17086ae9d2fe0d41a7ed735a159956708acb54628ec8fc0d6e3ae6a06c33fa89f8bf32b9fe7e9dd2c82089a3bf62a1b96de9298935798f0225df3c74f0d7ca81c3657f39674a929c74afee2230987459209c01bf29d88e6f36a5bba86bf157cc6ddfe772ce5dc92f4c870eaefdfe77ad28e9d51ed2957898394a8608ac9c64b76de6ba1ba7d02a99eb0db3ed49250c2ab0fb129c632acdbabde91cb5a2c587e582577496572d53a515b77645c7d8877bb53abd7ae9a0c8225c3c3ed5d01eac2da1ddc32dd331d840073448117ea177c5093e9d55840e40449375d55a75e6f7e8bbc32f31c520a9f5a796998e635b66720664cec15d02b6ef2d4cf6b6b12f6757528f920ad32ffb71b1e839b3bb8943fba8b1566e54ecd30c921c94baca5424ed10fc75c621bd676328a771f26e8117ab8e3cf8e13422c0263d5c3e1209dcae679bc07a69659f4405a8c501d74a426e62cd26d4656c7e5dce2c9a8a0bda310b87c436f3701aa2814e68f0b7e2258b9c545b4336985399ddc861fe058fda920604eeb18dc0ea6b93b3a4fbf272953eef20e310207483810fb05f7c827efc93863fefc01b53a5ffc744a42b3816cbcfefa3f34b666eb09412953deafe9074a5a81e3dabfd16c50d371fcfa55db9d74ff9606f658c83ca75a2c8bd9fa2f1b7111ad0a2bfd3e530670b2df23573b421492deec40c9df206e81bb3954e2b317a8e96c2402b11db7e6ca08e6d7e163dfb8592c3895604d52e0b1f27a4a63c5c19a1c09eca4248c9cfba279a17d27f358a9c14ea8dcec1ce1188847188a432d9003a8d2d854f53e7eca94f4f9d969c3cd23a2c1ab519b5764ac3a6403381d0d5dc54e82456db9d510ec096547433ddcc7972a89e99d57fd5c1d3cc42ffb7990d03f6adfb7be48c79477527c03ad72b1e1811b41e8c77b35a920febab34327f377e5000698cacab7236aaf18a83d570ac1f294bb8360533e83c21d853f6e96fdb73383c1f3e6e919f215b0865856e04c9fc5b100c80649dcc4d24b9723ba0946247ee91058113451d49c172071e823a3c0c33b3488f18e4881399cc2fcca2830b5f2e239f694f0c4416247be4968b99b9b22ed87f7d139060a7ea964bc7cb6716fda555cfe9c43be1c610c39ff60146428120197940945e8b5739926ce280a653bf5e9d4db36ffe9e5d79559e300643d8419d9f675eddaa2a7f2fd3bae03efc960eaf39eea5bf9ea5b164e237f50cf30e7bbbe330bfb9ecbb920285b0b1dca03df684f86841af29a3dccf96d1c8a2bc71c1746a8c7c1662e60aae94141eea4881c1da50e9563c0c2088cfea9a815f6eddd9e841392e95e3f9cd918b03c56f7d16fcd97b75b039b050ee410128d6495e88068a7b81db58975a3757556260d36e2bc2080a9cff198a2aa424a1e53940fe793d15cffea9305f8e1703e0ead94cbbb6efe59c3c02333c5eb1ca846627322533f193e04dd90129f132a5c4bf7143b1d0522c560a968674d57558ba10e8c166676442c6a066b90013e4699e283a45d6edec438d1e3b09aaff2345a32fea7dc611a866a7655c206fb7d939e6390f122c469b1ea732b51e51201db39c488b0945d1e962003f5d0dbb0a384e56c02ee4cb5fa4298e2a28b2931f407a92318b6426eeb52f8392473f475c824c21b968ee83805fbae50eb1f84ebe8fb7e2cd89b8c1fd14cba8f3406077f33e547062f80d1e9c6ffa766ca0afbfb2cc0e45593884a5934178b9d777e1b45ff0a6c05de1fe49eebe3ea4440a734c42ac528ecbf781efa4bf6b00a65e9bab5151e792472049f7913ac6c4fa9538434f477bb40a7bdd68f68d1d90ca10dea7fb1885a0edb5022e5b5b99eb5c73a8d0cf4eacd49e9193e5d9ede30a3d3e9f6e53c43ce9fe7405a3598718933e888fc0b1a8bd98f9acaed39268e5d854d0dc8b955c401e20add3a7c540e58feaef6da2d9e22ac93a2b4d5fb66a9b6cc35c4b97038e7fcbda352f762095ff61f0112f83b165cd3a9912a77c566e3c8ba49d4af9182081801f1c7402410344ce34a32e3f8386b837f995a22abe36b45afd37cfeb3001a9aac94bacbeef77d826e760103e305dd086e016d086d84da1697c9c291238f445028462f8cb6b67c01e40f8ecb86351a5c7c9eb042cf0a70f65fcaa9164d3d39d5534be0172f9331ebb75e360344de6ff1987983d6170fb05fb0e3e7e056dda3af89edb263cbd996236f41e6af178f7b31e277200173f666439925a9c44023b84b477d9472bbe10b48ddd830a53</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>清醒自律,热爱生活</title>
    <url>/2022/10/05/%E6%B8%85%E9%86%92%E8%87%AA%E5%BE%8B-%E7%83%AD%E7%88%B1%E7%94%9F%E6%B4%BB/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9804788df5f1aa31157fc0391b5c0b32b85360f4365ec19992b59d84b04d6116">7763ba0d8906c78f6d10e0023d32f7d513d52c310de14a4cc9a2a868f509c2dd1b930fdfbef8ab2fc1e1e39c7da71d1cde69fbf8cfb6a25d617d81f092082f398b5ee16defff788f3d47fad71d79e5400851853f521d9dcbf58035bd4403be8ed424abe61e777adf3d7ff705e24ef4737b3a11f9d1f6c50df4e8704928914e20</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>递归与分治策略</title>
    <url>/2022/10/17/%E9%80%92%E5%BD%92%E4%B8%8E%E5%88%86%E6%B2%BB%E7%AD%96%E7%95%A5/</url>
    <content><![CDATA[<hr>
<h3 id="1、二分"><a href="#1、二分" class="headerlink" title="1、二分"></a>1、二分</h3><p>在单调递增序列a中查找&gt;&#x3D;x的数中最小的一个（即x或x的后继）<br>while(l&lt; r)<br>{<br>    int mid&#x3D;(l+r)&#x2F;2;<br>    if(a[mid]&gt;&#x3D;x)<br>        r&#x3D;mid;<br>    else<br>        l&#x3D;mid+1;<br>}<br>return a[l];</p>
<p>在单调递增序列a中查找&lt;&#x3D;x的数中最大的一个（即x或x的前驱）<br>while(l&lt; r)<br>{<br>    int mid&#x3D;(l+r+1)&#x2F;2;<br>    if(a[mid]&lt;&#x3D;x)<br>        l&#x3D;mid;<br>    else<br>        r&#x3D;mid-1;<br>}<br>return a[l];</p>
<hr>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库系统概论</title>
    <url>/2022/06/28/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h2><h4 id="1、数据的独立性"><a href="#1、数据的独立性" class="headerlink" title=" 1、数据的独立性  "></a><font color=#008000> 1、数据的独立性  </font></h4><ul>
<li>物理独立性：用户程序和数据库中的数据的物理存储是相互独立的。</li>
<li>逻辑独立性：用户程序和数据库的逻辑结果是相互独立的。</li>
<li>保证：二级映像功能</li>
</ul>
<h4 id="2、数据模型"><a href="#2、数据模型" class="headerlink" title=" 2、数据模型  "></a><font color=#008000> 2、数据模型  </font></h4><p>数据模型的作用：数据模型是数据库系统的基础，任何一个DBMS都是以某一个数据模型为基础。<br>数据模型的三个要素：数据结构、数据操作、数据完整性约束条件</p>
<h4 id="3、数据库、数据库系统"><a href="#3、数据库、数据库系统" class="headerlink" title=" 3、数据库、数据库系统  "></a><font color=#008000> 3、数据库、数据库系统  </font></h4><p>数据库概念：数据库是长期储存在计算机中、有组织、可共享的大量数据的集合。<br>数据库系统概念：数据库系统是由数据库、数据库管理系统、应用程序、数据库管理员组成的存储、管理、处理和维护数据的系统。<br>数据库系统的特征：①数据结构化（和文件系统的本质区别）；②数据独立性高；③数据的共享性高、易扩充、冗余度低；④由数据库管理系统统一管理。</p>
<h4 id="4、数据库管理系统的主要功能："><a href="#4、数据库管理系统的主要功能：" class="headerlink" title=" 4、数据库管理系统的主要功能：  "></a><font color=#008000> 4、数据库管理系统的主要功能：  </font></h4><ul>
<li>数据库定义功能</li>
<li>数据组织、存储和管理功能</li>
<li>数据操纵功能</li>
<li>数据库的事务管理和运行管理</li>
<li>数据库的建立和维护功能</li>
<li>其他功能，如不同数据库之间的互访和互操作等功能。</li>
</ul>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h4 id="1、关系数据库结构及其形式化定义"><a href="#1、关系数据库结构及其形式化定义" class="headerlink" title=" 1、关系数据库结构及其形式化定义  "></a><font color=#008000> 1、关系数据库结构及其形式化定义  </font></h4><ul>
<li>关系：&gt; 域（domain）、笛卡尔积（cartesian product：n元组，做笛卡尔积的每个集合中贡献一个数组成的集合；一个域允许的最大的不同取值的个数叫做基数）<br>&gt; n元关系（笛卡尔积的子集），属性，二元表格中的域，候选码-&gt;主码，主属性，非主属性&#x2F;非码属性，全码</li>
<li>关系的类型：基本关系（基本表&#x2F;基表）、查询表、视图</li>
<li>关系模式、关系（有一说一，这个不知道重点在哪里）</li>
</ul>
<h4 id="2、关系操作"><a href="#2、关系操作" class="headerlink" title=" 2、关系操作  "></a><font color=#008000> 2、关系操作  </font></h4><ul>
<li>关系操作的特点、非关系操作的特点</li>
</ul>
<h4 id="3、关系的完整性（三类完整性约束条件）"><a href="#3、关系的完整性（三类完整性约束条件）" class="headerlink" title=" 3、关系的完整性（三类完整性约束条件）  "></a><font color=#008000> 3、关系的完整性（三类完整性约束条件）  </font></h4><ul>
<li>关系的两个不变性</li>
<li>实体完整性：实体完整性规则+实体完整性（？不太明白例题讲了是干啥的）</li>
<li>参照完整性：<ul>
<li>外码（foreign key）、参照关系(referencing relation)、被参照关系(referenced relation)&#x2F;目标关系(target relation)</li>
<li>关系R和S不一定是不同的关系（理解一下书上的例题）</li>
<li>关系间引用属性-&gt;相互制约</li>
</ul>
</li>
<li>用户定义的完整性</li>
</ul>
<h4 id="4、关系代数"><a href="#4、关系代数" class="headerlink" title=" 4、关系代数  "></a><font color=#008000> 4、关系代数  </font></h4><ul>
<li>传统的集合运算<ul>
<li>并（union）：</li>
<li>差（except）</li>
<li>交</li>
<li>笛卡尔积</li>
</ul>
</li>
<li>专门的关系运算<ul>
<li>选择（select）<br>不等于：&lt;&gt; </li>
<li>投影（projection）：对列的操作</li>
<li>连接（join）：等值连接（equal join） &amp; 自然连接（natural join）（本质上是在自然连接基础上取消重复的列）<br>           悬浮元组、外连接（outer join：保留悬浮元组的值，空的地方置NULL）、左外连接（只保留左边关系的悬浮元组）、右外连接</li>
<li>除运算（division）：记住书上的例子吧~</li>
</ul>
</li>
<li>五种基本运算</li>
</ul>
<h4 id="5、关系的完整性"><a href="#5、关系的完整性" class="headerlink" title=" 5、关系的完整性  "></a><font color=#008000> 5、关系的完整性  </font></h4><p>·专门的关系运算<br>    &gt; 选择：<br>    &gt; 投影：积分投影<br>    &gt; 连接：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">非等值连接：</span><br><span class="line">等值连接：</span><br><span class="line">自然连接：自然连接是等值连接去掉相同的属性列后的结果</span><br></pre></td></tr></table></figure>


<h2 id="第三章-关系数据库标准语言SQL"><a href="#第三章-关系数据库标准语言SQL" class="headerlink" title="第三章 关系数据库标准语言SQL"></a>第三章 关系数据库标准语言SQL</h2><h4 id="1、注意事项"><a href="#1、注意事项" class="headerlink" title=" 1、注意事项  "></a><font color=#008000> 1、注意事项  </font></h4><p>※对于表意不明确的地方，要加上表名<br>※多做几遍评测平台的题目<br>※写sql语句的注意事项<br>※对于同一个表查询的时候，记得起别名</p>
<h4 id="2、数据定义："><a href="#2、数据定义：" class="headerlink" title=" 2、数据定义：  "></a><font color=#008000> 2、数据定义：  </font></h4><p>alter table &lt;表名&gt;<br>[add [column] &lt;新列名&gt;&lt;数据类型&gt;[完整性约束]]<br>[add&lt;表级完整性约束&gt;]<br>[drop [column]&lt;列名&gt;[cascade|restrict]]<br>[drop constraint&lt;完整性约束条件&gt;[restrict|cascade]]<br>[alter column&lt;列名&gt;&lt;数据类型&gt;]</p>
<ul>
<li>cascade：对表的删除没有约束条件</li>
<li>restraint：想要删除的基本表不能被其他表所引用</li>
</ul>
<p>对表的约束（列级约束和表级约束）<br>列级约束有六种：主键Primary key、外键foreign key 、唯一 unique、检查 checck 、默认default 、非空&#x2F;空值 not null&#x2F; null</p>
<p>表级约束有四种：主键、外键、唯一、检查</p>
<h4 id="3、数据查询："><a href="#3、数据查询：" class="headerlink" title=" 3、数据查询：  "></a><font color=#008000> 3、数据查询：  </font></h4><ul>
<li>distinct：消除重复的行</li>
<li>between and;not between and: 确定范围</li>
<li>in; not in: 确定集合</li>
<li>like; not like: 字符匹配，a%b,以a开头，以b结尾，任意长度的字符串；a_b，以a开头，以b结尾，总长度为3的字符串</li>
<li>is null; is not null: 空值</li>
<li>and, or, not：逻辑运算</li>
<li>聚集函数</li>
<li>group by：将查询结果按某一列或多列的值分组，值相等的为一组</li>
<li>等值与非等值连接到查询<ul>
<li>等值连接</li>
<li>自然连接</li>
</ul>
</li>
<li>自身连接：要新建别名</li>
<li>外连接：悬浮元组、左外连接、右外连接</li>
<li>多表连接：很多个表进行连接的时候，直接进行条件连接，不写嵌套查询</li>
</ul>
<blockquote>
<p>嵌套查询：<br>子查询不能使用order by语句，order by只能对最终结果进行排序<br>对于查询结果是集合的情况，使用谓词in<br>不相关子查询<br>相关子查询：父查询定义的别名，子查询会用到</p>
</blockquote>
<ul>
<li>any（some）;all</li>
<li>exists</li>
<li>集合查询:union,intersect,except</li>
</ul>
<blockquote>
<p>数据更新<br>插入数据：如果是数字的话，不要加引号！！！<br>修改数据：update student set sage &#x3D; 22 where sno &#x3D; ‘0501029’<br>删除数据：delete from student where sno &#x3D; ‘0501029’</p>
</blockquote>
<blockquote>
<p>空值的处理<br>向表中插入空值，直接插入NULL，不加引号，像数字一样<br>空值的判断：is null; is not null</p>
</blockquote>
<h4 id="4、视图"><a href="#4、视图" class="headerlink" title=" 4、视图  "></a><font color=#008000> 4、视图  </font></h4><ul>
<li>行列子集视图</li>
<li>视图的作用</li>
<li>视图相关sql语句</li>
</ul>
<p>视图：命名化的select语句<br>视图的定义存储下来</p>
<p>–存在系统数据字典中<br>create view v_student () as + 子查询<br>    select student.sno,sname,cno,grade<br>    from Sdtudent, Sc	<br>    where student.sno &#x3D; sc.sno and cno &#x3D; ‘2’</p>
<p>select * from v_student<br>子查询结果会作为视图结果</p>
<p>select * from<br>视图作用：简化了用户书写SQL的复杂度<br>    保证了数据的安全性<br>    一定程度上保证数据的逻辑独立性<br>—-视图（连接查询、聚集函数）<br>–行列子集视图（来源于单表，视图中包含主键，只是去掉了不重要的属性列，并且去掉的属性列都可以取值为空）</p>
<p>–with check option<br>—视图中，尽量不要带*号</p>
<p>create view v_stu(sno,sname)<br>as<br>select sno, sname<br>from Student<br>where sdept &#x3D; ‘计算机’</p>
<p>drop view 删除视图</p>
<h2 id="第四章-数据库安全性"><a href="#第四章-数据库安全性" class="headerlink" title="第四章 数据库安全性"></a>第四章 数据库安全性</h2><h4 id="1、本章基于重点复习"><a href="#1、本章基于重点复习" class="headerlink" title=" 1、本章基于重点复习  "></a><font color=#008000> 1、本章基于重点复习  </font></h4><ul>
<li>自主存取权限控制</li>
<li>grant</li>
<li>revoke</li>
<li>角色</li>
<li>完成权限的授权并传递出去</li>
</ul>
<h4 id="2、存取控制"><a href="#2、存取控制" class="headerlink" title=" 2、存取控制  "></a><font color=#008000> 2、存取控制  </font></h4><ul>
<li>存取控制<ul>
<li>数据库管理系统的存取控制子系统：定义用户权限+合法权限检查机制</li>
<li>自主存取控制（DAC）</li>
<li>强制存取控制（MAC）</li>
</ul>
</li>
<li>自主存取控制方法<ul>
<li>用户权限：数据库对象、操作权限</li>
<li>定义存取权限&#x3D;授权</li>
</ul>
</li>
<li>授权：授予与收回<ul>
<li>grant：grant &lt;权限&gt; on &lt;对象类型&gt;&lt;对象名&gt; to &lt;用户&gt; [with grant option];&#x2F;&#x2F;不一定是只有一个权限，一个对象<br>with grant option: 被授权用户可以把权限授予其他用户，不能授予祖先用户</li>
<li>revoke：revoke &lt;权限&gt; on &lt;数据对象&gt; from &lt;用户&gt; [cascade|restrict];</li>
<li>revoke update(sno) on table student from userx;</li>
</ul>
</li>
<li>数据库角色<ul>
<li>角色是权限的集合</li>
<li>创建角色：create role &lt;角色名&gt;</li>
<li>给角色授权：grant &lt;权限&gt;</li>
</ul>
</li>
</ul>
<h2 id="第五章-数据库完整性"><a href="#第五章-数据库完整性" class="headerlink" title="第五章 数据库完整性"></a>第五章 数据库完整性</h2><h4 id="1、定义外键："><a href="#1、定义外键：" class="headerlink" title=" 1、定义外键：  "></a><font color=#008000> 1、定义外键：  </font></h4><p>  foreign key(属性) references student(属性)</p>
<h4 id="2、触发器"><a href="#2、触发器" class="headerlink" title=" 2、触发器  "></a><font color=#008000> 2、触发器  </font></h4><p><img src="https://user-images.githubusercontent.com/99975690/174471296-4fc6f5f8-0e1f-4146-ad31-a104242b384b.jpg" alt="0AZF_~YZZY3O6)_F9G2BW{N" loading="lazy"></p>
<h2 id="第六章-关系数据理论"><a href="#第六章-关系数据理论" class="headerlink" title="第六章 关系数据理论"></a>第六章 关系数据理论</h2><h4 id="1、问题的提出"><a href="#1、问题的提出" class="headerlink" title=" 1、问题的提出  "></a><font color=#008000> 1、问题的提出  </font></h4><ul>
<li>关系模式可能存在的问题：数据冗余、更新异常、插入异常、删除异常</li>
</ul>
<h4 id="2、规范化"><a href="#2、规范化" class="headerlink" title=" 2、规范化  "></a><font color=#008000> 2、规范化  </font></h4><ul>
<li>函数依赖：函数依赖定义、非平凡函数依赖、决定属性组&#x2F;决定因素、完全函数依赖、传递函数依赖</li>
<li>码：候选码、超码、（候选码的任何真子集不一定是超码）、主码、主属性、非主属性&#x2F;非码属性、全码、外部码&#x2F;外码</li>
<li>码：是码，就得能找出来一对一关系</li>
</ul>
<blockquote>
<p>范式<br>规范化<br>2NF：①每一个非主属性完全依赖于任何一个候选码。②存在问题：插入异常、删除异常、修改复杂<br>3NF：①不存在传递函数依赖。②画有向图，根据图去判断是不是<br>BCNF：①Y非平凡函数依赖X，X有主码。<br>多值依赖：①多值依赖的性质；②多值依赖与函数依赖的区别<br>和BCNF类似，把函数依赖改成多值依赖即可<br>  P189：规范化过程</p>
</blockquote>
<h4 id="3、函数依赖的公理系统"><a href="#3、函数依赖的公理系统" class="headerlink" title=" 3、函数依赖的公理系统  "></a><font color=#008000> 3、函数依赖的公理系统  </font></h4><h2 id="第七章-数据库设计"><a href="#第七章-数据库设计" class="headerlink" title="第七章 数据库设计"></a>第七章 数据库设计</h2><h4 id="1、数据库设计概述"><a href="#1、数据库设计概述" class="headerlink" title=" 1、数据库设计概述  "></a><font color=#008000> 1、数据库设计概述  </font></h4><p>需求分析 -&gt; 概念结构设计 -&gt; 逻辑结构设计 -&gt; 物理结构设计 -&gt; 数据库实施 -&gt; 数据库运行和维护</p>
<h4 id="2、需求分析"><a href="#2、需求分析" class="headerlink" title=" 2、需求分析  "></a><font color=#008000> 2、需求分析  </font></h4><blockquote>
<p>数据字典：<br>数据项（最小单位）<br>数据结构（数据间组合关系）<br>数据流（数据结构在系统内的传输路径）<br>数据存储（数据结构停留或保存的地方）<br>处理过程</p>
</blockquote>
<h4 id="3、概念结构设计"><a href="#3、概念结构设计" class="headerlink" title=" 3、概念结构设计  "></a><font color=#008000> 3、概念结构设计  </font></h4><ul>
<li>E-R模型</li>
<li>实体之间的联系：两个实体型之间的联系：1：1 &#x2F; 1：n &#x2F; n：m ; 两个以上实体间的联系：同两个</li>
<li>参与联系的实体型的数目成为联系的度。N元联系<br>-E-R图<ul>
<li>实体型 -&gt; 矩形; 属性 -&gt; 椭圆; 联系 -&gt; 菱形(标注1:1, 1:n, n: m)</li>
<li>(多理解一下课本上的例子)</li>
</ul>
</li>
</ul>
<h4 id="4、逻辑结构设计"><a href="#4、逻辑结构设计" class="headerlink" title=" 4、逻辑结构设计  "></a><font color=#008000> 4、逻辑结构设计  </font></h4><ul>
<li>E-R图向关系模型的转换</li>
</ul>
<h2 id="第九章-关系查询处理和查询优化"><a href="#第九章-关系查询处理和查询优化" class="headerlink" title="第九章  关系查询处理和查询优化"></a>第九章  关系查询处理和查询优化</h2><h4 id="1、关系数据库系统的查询处理"><a href="#1、关系数据库系统的查询处理" class="headerlink" title=" 1、关系数据库系统的查询处理  "></a><font color=#008000> 1、关系数据库系统的查询处理  </font></h4><ul>
<li><p>查询处理步骤<br>查询分析（语法）-&gt;查询检查（语义，视图，权限，完整性约束-&gt;关系代数表达式）-&gt;查询优化（代数优化、物理优化）-&gt;查询执行</p>
</li>
<li><p>视图消解法：把对视图的操作转换为对基本表的操作，由DBMS完成</p>
</li>
</ul>
<h4 id="2、实现查询示例的算法示例"><a href="#2、实现查询示例的算法示例" class="headerlink" title=" 2、实现查询示例的算法示例  "></a><font color=#008000> 2、实现查询示例的算法示例  </font></h4><ul>
<li><p>选择操作的实现</p>
<ul>
<li>简单的全表扫描算法（table scan）：读+判断，不适用选择率低的情况</li>
<li>索引扫描算法（index scan）</li>
</ul>
</li>
<li><p>连接操作的实现</p>
<ul>
<li>嵌套循环算法（nested loop join）：俩for循环</li>
<li>排序-合并算法（sort-merge join&#x2F;merge join）：双指针</li>
<li>索引连接算法（index join）</li>
<li>hash join算法（？）</li>
</ul>
</li>
<li><p>实例分析：<br>  eg：求选修了2号课程的学生的姓名。假定数据库中，有1000个学生记录，10000个选课记录，其中选修2号课程的选课记录为50个。</p>
<ul>
<li>先计算笛卡尔积：先算读入需要多少块，然后加上连接需要多少块，最后加上选择需要多少块。</li>
<li>先做自然连接</li>
<li>先选择</li>
</ul>
</li>
<li><p>当选择和连接同时存在时，先做选择操作。</p>
</li>
</ul>
<h4 id="3、代数优化（具体做的时候理解一下）"><a href="#3、代数优化（具体做的时候理解一下）" class="headerlink" title=" 3、代数优化（具体做的时候理解一下）  "></a><font color=#008000> 3、代数优化（具体做的时候理解一下）  </font></h4><ul>
<li>关系代数表达式等价变换原则<ul>
<li>连接、笛卡尔积的交换律 </li>
<li>连接、笛卡尔积的结合律</li>
<li>投影的串接定律</li>
<li>选择的串接定律</li>
<li>选择与投影操作的交换律</li>
<li>选择与笛卡尔积的交换律</li>
<li>选择与并的分配律</li>
<li>选择与差运算的分配律</li>
<li>选择对自然连接的分配律</li>
<li>投影与笛卡尔积的分配律</li>
<li>投影与并的分配律</li>
</ul>
</li>
<li>查询树的启发式优化<ul>
<li>典型的启发式规则：①先选择；②同时投影和选择；③把投影和其前后的双目运算所结合；④连接运算比笛卡尔积快；⑤找公共子表达式（具体含义没看懂）</li>
</ul>
</li>
</ul>
<h2 id="第十章-数据库恢复技术"><a href="#第十章-数据库恢复技术" class="headerlink" title="第十章 数据库恢复技术"></a>第十章 数据库恢复技术</h2><h4 id="1、事务"><a href="#1、事务" class="headerlink" title=" 1、事务  "></a><font color=#008000> 1、事务  </font></h4><h4 id="2、事务语句"><a href="#2、事务语句" class="headerlink" title=" 2、事务语句  "></a><font color=#008000> 2、事务语句  </font></h4><p>   begin transaction：<br>   commit：<br>   rollback:</p>
<h4 id="3、事务的ACID特性"><a href="#3、事务的ACID特性" class="headerlink" title=" 3、事务的ACID特性  "></a><font color=#008000> 3、事务的ACID特性  </font></h4><p>Atomicity, Consistency, Isolation, Durability </p>
<h4 id="4、事务故障：数据库被破坏，事务未完成"><a href="#4、事务故障：数据库被破坏，事务未完成" class="headerlink" title=" 4、事务故障：数据库被破坏，事务未完成  "></a><font color=#008000> 4、事务故障：数据库被破坏，事务未完成  </font></h4><ul>
<li>事务内部故障：可预期; 不可预期</li>
<li>系统故障（软故障）：回滚、redo</li>
<li>介质故障</li>
<li>计算机病毒</li>
<li>故障对数据库影响的两种可能<br>借助冗余来实现恢复</li>
</ul>
<h4 id="5、恢复的实现技术"><a href="#5、恢复的实现技术" class="headerlink" title=" 5、恢复的实现技术  "></a><font color=#008000> 5、恢复的实现技术  </font></h4><ul>
<li>数据转储（基本技术）<br>后备副本&#x2F;后援副本<br>静态转储; 动态转储(日志文件)<br>海量转储; 增量转储</li>
<li>登记日志文件（记录更新操作）<br>以记录为单位的日志文件<ul>
<li>内容：事务标识，操作类型，操作对象，更新前的旧值，更新后的新值<br>以数据为单位的日志文件<br>日志文件作用<br>登记日志文件原则: 时间顺序; 先日志后数据库</li>
</ul>
</li>
</ul>
<h4 id="6、恢复策略"><a href="#6、恢复策略" class="headerlink" title=" 6、恢复策略  "></a><font color=#008000> 6、恢复策略  </font></h4><ul>
<li>事务故障恢复: 反向扫描日志，找更新操作 -&gt; 逆操作 -&gt; 直到开始</li>
<li>系统故障恢复: 正向扫描日志文件，+redo_list &amp; + undo_list -&gt; undo队列undo -&gt; redo队列redo</li>
<li>介质故障的恢复: 重装数据库(对动态转储而言，还要加上日志文件)，重做已完成的事务</li>
</ul>
<h4 id="7、具有检查点的数据恢复技术"><a href="#7、具有检查点的数据恢复技术" class="headerlink" title=" 7、具有检查点的数据恢复技术  "></a><font color=#008000> 7、具有检查点的数据恢复技术  </font></h4><ul>
<li>检查点记录的内容：建立检查点时刻所有正在执行的事务清单，这些事务最近的日志记录的地址</li>
<li>步骤：写日志 -&gt; 在日志中写检查点 -&gt; 数据缓冲区数据写入磁盘 -&gt; 把检查点记录的地址写入一个重新开始文件</li>
</ul>
<h2 id="第十一章-并发控制"><a href="#第十一章-并发控制" class="headerlink" title="第十一章 并发控制"></a>第十一章 并发控制</h2><ul>
<li>并发控制的原因：①提高吞吐量和资源利用效率；②减少等待时间</li>
</ul>
<h4 id="1、三种数据不一致性"><a href="#1、三种数据不一致性" class="headerlink" title=" 1、三种数据不一致性  "></a><font color=#008000> 1、三种数据不一致性  </font></h4><ul>
<li>丢失修改(lost update)(写写)  </li>
<li>不可重复读(non-repeatable read)(读写), 三种情况，增删改</li>
<li>读“脏”数据(dirty read)(写读撤)<br>破坏了事务的隔离性 <br/><br>并发控制的主要技术: 封锁(locking), 时间戳(timestamp), <u> 乐观控制法(optimistic scheduler) </u> 和 <u> 多版本并发控制(multi-version concurrency control, MVCC) </u> 等.</li>
</ul>
<blockquote>
<p>基于时间戳的并发控制：<br>时间戳：当一个事务启动的时候，给这个事务一个时间戳。按照时间戳从小到大执行的操作是正确的，反之是不正确的，借助时间戳就不需要借助锁。如果存在冲突，就撤销该事务，并重启该事务，然后给该事务分配一个更靠后的时间戳。<br>冲突：读写，写写，写读<br>判断处理<br><a href="https://blog.csdn.net/qq_42902997/article/details/119352901">学习博客</a><br>乐观控制法</p>
</blockquote>
<h4 id="2、封锁"><a href="#2、封锁" class="headerlink" title=" 2、封锁  "></a><font color=#008000> 2、封锁  </font></h4><p>排他锁、共享锁</p>
<h4 id="3、封锁协议"><a href="#3、封锁协议" class="headerlink" title=" 3、封锁协议 "></a><font color=#008000> 3、封锁协议 </font></h4><ul>
<li>一级封锁协议：无法解决不可重复读和读“脏”数据</li>
<li>二级封锁协议：以一级封锁协议为基础，读完释放</li>
<li>三级封锁协议：以一级封锁协议为基础，事务结束释放<br>重点理解一下二级封锁协议和三级封锁协议之间的联系与区别</li>
</ul>
<h4 id="4、活锁和死锁"><a href="#4、活锁和死锁" class="headerlink" title=" 4、活锁和死锁  "></a><font color=#008000> 4、活锁和死锁  </font></h4><ul>
<li>活锁：一直在等待，解决方法：先来先服务</li>
<li>死锁：出现环</li>
<li>死锁的预防<ul>
<li>一次封锁法：某个事务所要用到的全部数据加锁</li>
<li>顺序封锁法</li>
</ul>
</li>
<li>死锁的诊断与解除<ul>
<li>超时法</li>
<li>等待图法(T1等待T2，T1指向T2)，方法是选择一个处理死锁代价最小的事务</li>
</ul>
</li>
</ul>
<h4 id="5、并发调度的可串行化"><a href="#5、并发调度的可串行化" class="headerlink" title=" 5、并发调度的可串行化  "></a><font color=#008000> 5、并发调度的可串行化  </font></h4><ul>
<li>可串行化调度</li>
<li>可串行性</li>
<li>冲突可串行化调度 R<sub>i</sub>(x)与W<sub>j</sub>(x) &amp; W<sub>i</sub>(x)与W<sub>j</sub>(x)<blockquote>
<p>不同事务的冲突操作和同一事务的两个操作是不可交换的<br>冲突可串行化调度<br>冲突可串行化调度是可串行化调度的充分条件<br>(?)：注意理解可串行化调度，感觉有点晕</p>
</blockquote>
</li>
</ul>
<h4 id="6、两段锁协议-2PL协议"><a href="#6、两段锁协议-2PL协议" class="headerlink" title=" 6、两段锁协议(2PL协议)  "></a><font color=#008000> 6、两段锁协议(2PL协议)  </font></h4><ul>
<li>加锁 + 解锁</li>
<li>事务遵循两段锁协议是可串行化调度的充分条件，不是必要条件。</li>
<li>一次封锁法与两段锁协议(可能发生死锁)</li>
</ul>
<h4 id="7、封锁的粒度"><a href="#7、封锁的粒度" class="headerlink" title=" 7、封锁的粒度  "></a><font color=#008000> 7、封锁的粒度  </font></h4><ul>
<li>封锁粒度</li>
<li>封锁粒度选择原则</li>
<li>意向锁</li>
<li>IS锁， IX锁， SIX锁</li>
</ul>
]]></content>
      <categories>
        <category>数据库学习</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统实训_基于多级目录的文件管理系统</title>
    <url>/2022/07/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD-%E5%9F%BA%E4%BA%8E%E5%A4%9A%E7%BA%A7%E7%9B%AE%E5%BD%95%E7%9A%84%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<!-- SDUT操作系统实训，第一次通宵写作业，记录一下 -->

<p>1、实训报告：<a href="https://github.com/mbwsfy0110/OS-Practical-training">github实训报告</a></p>
<p> 2、代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基于多级文件目录的文件管理系统</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">file</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    vector&lt;string&gt; vet; <span class="comment">//当前文件中存储的内容</span></span><br><span class="line">    string where;<span class="comment">//用来记录当前文件的位置</span></span><br><span class="line">    <span class="type">int</span> year,month,day,hour,minute,seconds;</span><br><span class="line">    <span class="type">int</span> _size;</span><br><span class="line">&#125;b[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">directory</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    vector&lt; pair&lt;string,<span class="type">int</span>&gt; &gt; hold;<span class="comment">//记录当前文件存储的文件,pair表示当前的存储是文件还是目录</span></span><br><span class="line">    map&lt;string,<span class="type">int</span>&gt; is_file; <span class="comment">//当前目录下是否存在某个名字的文件</span></span><br><span class="line">    map&lt;string,<span class="type">int</span>&gt; is_directory; <span class="comment">//当前目录下是否存在某个目录</span></span><br><span class="line">    string where;<span class="comment">//用来记录当前目录的位置</span></span><br><span class="line">    string pre;<span class="comment">//上一个文件，用来回到上一个目录</span></span><br><span class="line">    <span class="type">int</span> year,month,day,hour,minute,seconds;</span><br><span class="line">    <span class="type">int</span> _size;</span><br><span class="line">&#125;a[N];</span><br><span class="line">vector&lt; pair&lt;string,<span class="type">int</span>&gt; &gt; fid[N];<span class="comment">//存储某个名字所有出现的位置，如果second = 0，表示已经被删除</span></span><br><span class="line">map&lt;string,<span class="type">int</span> &gt; file_directory;<span class="comment">//找到某个文件或者目录存储的位置</span></span><br><span class="line"><span class="type">int</span> cnt;<span class="comment">//表示每个名字对应的位置</span></span><br><span class="line"><span class="type">int</span> cnt1, cnt2;<span class="comment">//表示存储的文件和目录的位置</span></span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;<span class="comment">//表示当前所在目录的坐标</span></span><br><span class="line"><span class="type">char</span> place[N];<span class="comment">//表示当前位置</span></span><br><span class="line"><span class="comment">//1表示目录，0表示文件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">manage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改变字符显示颜色</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">COLOR_PRINT</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s, <span class="type">int</span> color)</span></span>&#123;</span><br><span class="line">    HANDLE handle = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line">    <span class="built_in">SetConsoleTextAttribute</span>(handle, FOREGROUND_INTENSITY | color);</span><br><span class="line">    <span class="built_in">printf</span>(s);</span><br><span class="line">    <span class="built_in">SetConsoleTextAttribute</span>(handle, FOREGROUND_INTENSITY | <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_systime</span><span class="params">(<span class="type">int</span> tmp_stt, <span class="type">int</span> tmp_cnt)</span></span>&#123; <span class="comment">//tmp_cnt表示要进行操作的文件或目录的位置</span></span><br><span class="line">    <span class="type">time_t</span> rawtime;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">tm</span> *ptminfo;</span><br><span class="line">    <span class="built_in">time</span>(&amp;rawtime);</span><br><span class="line">    ptminfo = <span class="built_in">localtime</span>(&amp;rawtime);</span><br><span class="line">    <span class="keyword">if</span>(tmp_stt == <span class="number">1</span>)&#123; <span class="comment">//为1表示要对目录时间信息进行更新</span></span><br><span class="line">        a[tmp_cnt].year = ptminfo-&gt;tm_year + <span class="number">1900</span>;</span><br><span class="line">        a[tmp_cnt].month = ptminfo-&gt;tm_mon + <span class="number">1</span>;</span><br><span class="line">        a[tmp_cnt].day = ptminfo-&gt;tm_mday;</span><br><span class="line">        a[tmp_cnt].hour = ptminfo-&gt;tm_hour;</span><br><span class="line">        a[tmp_cnt].minute = ptminfo-&gt;tm_min;</span><br><span class="line">        a[tmp_cnt].seconds = ptminfo-&gt;tm_sec;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123; <span class="comment">//为0表示要对文件时间信息进行更新</span></span><br><span class="line">        b[tmp_cnt].year = ptminfo-&gt;tm_year + <span class="number">1900</span>;</span><br><span class="line">        b[tmp_cnt].month = ptminfo-&gt;tm_mon + <span class="number">1</span>;</span><br><span class="line">        b[tmp_cnt].day = ptminfo-&gt;tm_mday;</span><br><span class="line">        b[tmp_cnt].hour = ptminfo-&gt;tm_hour;</span><br><span class="line">        b[tmp_cnt].minute = ptminfo-&gt;tm_min;</span><br><span class="line">        b[tmp_cnt].seconds = ptminfo-&gt;tm_sec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数用来获取目录和文件的大小</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_size</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> tmp_cnt)</span></span>&#123;<span class="comment">//tmp_cnt为目录或文件所在存储位置</span></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(id == <span class="number">1</span>)&#123; <span class="comment">//获取目录的大小</span></span><br><span class="line">        sum = a[tmp_cnt].is_file.<span class="built_in">size</span>() + a[tmp_cnt].is_directory.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123; <span class="comment">//获取文件的大小</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; b[tmp_cnt].vet.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            sum += b[tmp_cnt].vet[i].<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现目录打开功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">open</span><span class="params">(string poss)</span></span>&#123; <span class="comment">//poss表示要打开的目录的名字</span></span><br><span class="line">    <span class="keyword">if</span>(poss == <span class="string">&quot;..&quot;</span>)&#123; <span class="comment">//linux命令行，cd ..表示返回上一级目录</span></span><br><span class="line">        <span class="keyword">if</span>(pos &gt;= <span class="number">1</span>) pos --;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt;<span class="string">&quot;wrong: wrong return!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//判断当前目录中是否含有要打开的目录文件</span></span><br><span class="line">        <span class="keyword">if</span>(a[pos].is_directory.<span class="built_in">find</span>(poss) == a[pos].is_directory.<span class="built_in">end</span>())&#123;</span><br><span class="line">            cout &lt;&lt;<span class="string">&quot;-bash: cd: &quot;</span> &lt;&lt; poss &lt;&lt;<span class="string">&quot; : Not a directory&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            pos = a[pos].is_directory[poss];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数用来实现新建目录功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mkdir</span><span class="params">(string poss)</span></span>&#123; <span class="comment">//poss表示所要新建的目录的名字</span></span><br><span class="line">    <span class="keyword">if</span>(a[pos].is_directory.<span class="built_in">find</span>(poss) != a[pos].is_directory.<span class="built_in">end</span>())&#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;warning: duplicate directories!&quot;</span>&lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cnt1 ++;</span><br><span class="line">        string tmp_pos = a[pos].where;</span><br><span class="line">        tmp_pos += <span class="string">&quot;/&quot;</span>;</span><br><span class="line">        tmp_pos += a[pos].name;</span><br><span class="line">        <span class="keyword">if</span>(file_directory.<span class="built_in">find</span>(poss) == file_directory.<span class="built_in">end</span>())&#123;</span><br><span class="line">            cnt ++;</span><br><span class="line">            file_directory[poss] = cnt;</span><br><span class="line">            fid[cnt].<span class="built_in">push_back</span>(&#123;tmp_pos,<span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> x = file_directory[poss];</span><br><span class="line">            fid[cnt].<span class="built_in">push_back</span>(&#123;tmp_pos,<span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        a[cnt1].name = poss;</span><br><span class="line">        a[cnt1].where = tmp_pos;</span><br><span class="line">        <span class="built_in">get_systime</span>(<span class="number">1</span>,cnt1); <span class="comment">//获取新建目录时的系统时间</span></span><br><span class="line">        a[pos].hold.<span class="built_in">push_back</span>(&#123;poss,<span class="number">1</span>&#125;);</span><br><span class="line">        a[pos].is_directory[poss] = cnt1;</span><br><span class="line">        a[cnt1].pre = a[pos].name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该函数用来实现新建文件功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">touch</span><span class="params">(string name, <span class="type">int</span> stt)</span></span>&#123; <span class="comment">//name表示所要新建的文件名</span></span><br><span class="line">    string tmp_pos = a[pos].where;</span><br><span class="line">    tmp_pos += <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    tmp_pos += a[pos].name;</span><br><span class="line">    <span class="keyword">if</span>(file_directory.<span class="built_in">find</span>(name) == file_directory.<span class="built_in">end</span>())&#123;<span class="comment">//查找和判断</span></span><br><span class="line">        cnt ++;</span><br><span class="line">        file_directory[name] = cnt;</span><br><span class="line">        fid[cnt].<span class="built_in">push_back</span>(&#123;tmp_pos,<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> x = file_directory[name];</span><br><span class="line">        fid[x].<span class="built_in">push_back</span>(&#123;tmp_pos,<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[pos].is_file.<span class="built_in">find</span>(name) != a[pos].is_file.<span class="built_in">end</span>())&#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;warning: duplicate files!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">manage</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cnt2 ++;<span class="comment">//更新相应数据结构</span></span><br><span class="line">    b[cnt2].where =tmp_pos;</span><br><span class="line">    b[cnt2].name = name;</span><br><span class="line">    <span class="built_in">get_systime</span>(<span class="number">0</span>,cnt2); <span class="comment">//获取新建文件时的系统时间</span></span><br><span class="line">    a[pos].hold.<span class="built_in">push_back</span>(&#123;name,<span class="number">0</span>&#125;);</span><br><span class="line">    a[pos].is_file[name] = cnt2;</span><br><span class="line">    <span class="keyword">if</span>(stt == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">manage</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">echo</span><span class="params">(string st)</span></span>&#123;<span class="comment">//st表示想要写到文件中的信息</span></span><br><span class="line">    string s;</span><br><span class="line">    s.<span class="built_in">clear</span>();</span><br><span class="line">    string postion;</span><br><span class="line">    postion.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; st.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(st[i] == <span class="string">&#x27;&quot;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s += st[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = i + <span class="number">2</span>; i &lt; st.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        postion += st[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[pos].is_file.<span class="built_in">find</span>(postion) == a[pos].is_file.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="comment">//查找所想要写入的文件是否存在，不存在进行创建文件和写入</span></span><br><span class="line">        <span class="keyword">if</span>(a[pos].is_directory.<span class="built_in">find</span>(postion) == a[pos].is_directory.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="built_in">touch</span>(postion, <span class="number">0</span>);</span><br><span class="line">            b[cnt2].vet.<span class="built_in">push_back</span>(s);</span><br><span class="line">            cout &lt;&lt; b[cnt2]._size &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt;<span class="string">&quot;wrong: Illegal naming!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123; <span class="comment">//存在的话，直接查询文件位置，然后进行信息写入即可</span></span><br><span class="line">        <span class="type">int</span> x = a[pos].is_file[postion];</span><br><span class="line">        b[x].vet.<span class="built_in">push_back</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该函数实现正向读取文件内容</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cat</span><span class="params">(string poss)</span></span>&#123; <span class="comment">//poss表示</span></span><br><span class="line">    <span class="keyword">if</span>(a[pos].is_file.<span class="built_in">find</span>(poss) == a[pos].is_file.<span class="built_in">end</span>())&#123; <span class="comment">//如果找不到文件就报错</span></span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;cat &quot;</span> &lt;&lt; poss &lt;&lt;<span class="string">&quot;: No such file or directory&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//找到文件直接正向读取文件信息即可</span></span><br><span class="line">        <span class="type">int</span> x = a[pos].is_file[poss];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; b[x].vet.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            cout &lt;&lt; b[x].vet[i] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该函数实现反向读取文件内容</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tac</span><span class="params">(string poss)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[pos].is_file.<span class="built_in">find</span>(poss) == a[pos].is_file.<span class="built_in">end</span>())&#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;cat &quot;</span> &lt;&lt; poss &lt;&lt;<span class="string">&quot;: No such file or directory&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> x = a[pos].is_file[poss];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = b[x].vet.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            cout &lt;&lt; b[x].vet[i] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(string order)</span></span>&#123; <span class="comment">//order表示展示命令</span></span><br><span class="line">    <span class="type">int</span> tmp_tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(order == <span class="string">&quot;all&quot;</span>)&#123; <span class="comment">//如果展示命令为all，则展示粗略包含信息</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a[pos].hold.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            string st = a[pos].hold[i].first;</span><br><span class="line">            <span class="type">char</span> tmp[M];</span><br><span class="line">            <span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span> tmp);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; st.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                tmp[j] = st[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[pos].hold[i].second == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">COLOR_PRINT</span>(tmp,<span class="number">7</span>);</span><br><span class="line">                tmp_tot ++;</span><br><span class="line">                cout &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="built_in">COLOR_PRINT</span>(tmp,<span class="number">1</span>);</span><br><span class="line">               tmp_tot ++;</span><br><span class="line">               cout &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmp_tot == <span class="number">0</span>) cout &lt;&lt;<span class="string">&quot;warning:is null&quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123; <span class="comment">//如果为-l,则展示详细信息，包括建立时间，大小和名称</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a[pos].hold.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            string st = a[pos].hold[i].first;</span><br><span class="line">            <span class="type">char</span> tmp[M];</span><br><span class="line">            <span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span> tmp);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; st.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                tmp[j] = st[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> tmp_pos;</span><br><span class="line">            <span class="keyword">if</span>(a[pos].hold[i].second == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[pos].is_directory.<span class="built_in">find</span>(st) != a[pos].is_directory.<span class="built_in">end</span>()) tmp_pos = a[pos].is_directory[st];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(tmp_tot == <span class="number">0</span>)&#123; <span class="comment">//输出目录的相关信息</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;create time\t\tsize\tname\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%02d-%02d-%02d %02d:%02d:%02d\t&quot;</span>,a[tmp_pos].year,a[tmp_pos].month, a[tmp_pos].day,</span><br><span class="line">                a[tmp_pos].hour, a[tmp_pos].minute,a[tmp_pos].seconds);</span><br><span class="line">                cout &lt;&lt; <span class="built_in">get_size</span>(<span class="number">1</span>,tmp_pos)&lt;&lt;<span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">                <span class="built_in">COLOR_PRINT</span>(tmp,<span class="number">7</span>);</span><br><span class="line">                tmp_tot ++;</span><br><span class="line">                cout &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123; <span class="comment">//输出文件的相关信息</span></span><br><span class="line">               <span class="keyword">if</span>(a[pos].is_file.<span class="built_in">find</span>(st) != a[pos].is_file.<span class="built_in">end</span>()) tmp_pos = a[pos].is_file[st];</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">               <span class="keyword">if</span>(tmp_tot == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;create time\t\tsize\tname\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;%02d-%02d-%02d %02d:%02d:%02d\t&quot;</span>,b[tmp_pos].year,b[tmp_pos].month, b[tmp_pos].day,</span><br><span class="line">                b[tmp_pos].hour, b[tmp_pos].minute,b[tmp_pos].seconds);</span><br><span class="line">                cout &lt;&lt;  <span class="built_in">get_size</span>(<span class="number">0</span>,tmp_pos)&lt;&lt;<span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">               <span class="built_in">COLOR_PRINT</span>(tmp,<span class="number">1</span>);</span><br><span class="line">               tmp_tot ++;</span><br><span class="line">                cout &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmp_tot == <span class="number">0</span>) cout &lt;&lt;<span class="string">&quot;warning:is null&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find_where</span><span class="params">(string name)</span></span>&#123; <span class="comment">//寻找名称为name的文件和目录</span></span><br><span class="line">    <span class="type">int</span> tmp_tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_directory.<span class="built_in">find</span>(name) == file_directory.<span class="built_in">end</span>())&#123; <span class="comment">//如果找不到，输出提示信息</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;can&#x27;t find!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//找到了，遍历进行输出</span></span><br><span class="line">        <span class="type">int</span> x = file_directory[name];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; fid[x].<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fid[x][i].second == <span class="number">1</span>)&#123;</span><br><span class="line">                cout &lt;&lt; fid[x][i].first &lt;&lt; endl;</span><br><span class="line">                tmp_tot ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找不到，输出错误提示信息</span></span><br><span class="line">        <span class="keyword">if</span>(tmp_tot == <span class="number">0</span>) cout &lt;&lt;<span class="string">&quot;can&#x27;t find!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">manage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string order1,order2;</span><br><span class="line">    <span class="built_in">COLOR_PRINT</span>(<span class="string">&quot;/home/user@LAPTOP-MFH2B9V0:&quot;</span>,<span class="number">2</span>);</span><br><span class="line">    string tmp_st = a[pos].where;</span><br><span class="line">    tmp_st +=<span class="string">&quot;/&quot;</span>;</span><br><span class="line">    tmp_st += a[pos].name;</span><br><span class="line">    <span class="built_in">memset</span>(place, <span class="number">0</span>, <span class="keyword">sizeof</span> place);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tmp_st.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        place[i] = tmp_st[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">COLOR_PRINT</span>(place,<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;$ &quot;</span>;</span><br><span class="line">    cin &gt;&gt; order1 &gt;&gt; order2;</span><br><span class="line">    <span class="keyword">if</span>(order1 == <span class="string">&quot;mkdir&quot;</span>)&#123; <span class="comment">//新建目录指令</span></span><br><span class="line">        <span class="built_in">mkdir</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;touch&quot;</span>)&#123;<span class="comment">//新建文件指令</span></span><br><span class="line">        <span class="built_in">touch</span>(order2, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;cd&quot;</span>)&#123;<span class="comment">//打开目录/返回上一级目录</span></span><br><span class="line">        <span class="built_in">open</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;echo&quot;</span>)&#123;<span class="comment">//写入信息到文件中去</span></span><br><span class="line">        <span class="built_in">echo</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;cat&quot;</span>)&#123;<span class="comment">//正向读取文件</span></span><br><span class="line">        <span class="built_in">cat</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;tac&quot;</span>)&#123;<span class="comment">//反向读取文件</span></span><br><span class="line">        <span class="built_in">tac</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;ls&quot;</span>)&#123;<span class="comment">//展示目录中所含的文件、子目录信息</span></span><br><span class="line">        <span class="built_in">show</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;find&quot;</span>)&#123;<span class="comment">//按名查找</span></span><br><span class="line">        <span class="built_in">find_where</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;command &#x27;&quot;</span> &lt;&lt; order1 &lt;&lt;<span class="string">&quot;&#x27; not found&quot;</span> &lt;&lt; endl; <span class="comment">//指令不存在报错</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//一些初始化操作</span></span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;Welcome to OS_work Page (Design Based on Linux)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt;endl;</span><br><span class="line">    a[<span class="number">0</span>].name = <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    file_directory[<span class="string">&quot;~/home&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">    a[<span class="number">0</span>].where = <span class="string">&quot;~/home&quot;</span>;</span><br><span class="line">    place[<span class="number">0</span>] = <span class="string">&#x27;~&#x27;</span>;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>实训</category>
      </categories>
      <tags>
        <tag>实训</tag>
      </tags>
  </entry>
</search>
