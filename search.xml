<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>下一件事情</title>
    <url>/2022/10/03/%E4%B8%8B%E4%B8%80%E4%BB%B6%E4%BA%8B%E6%83%85/</url>
    <content><![CDATA[<p><img src="https://user-images.githubusercontent.com/99975690/193596772-29a32b3a-9baa-4dc2-a718-9c1a37c6163a.jpg" alt="v2-10fb0670c436035f9a97611cb03fdf9c_1440w" loading="lazy"></p>
<table>
<thead>
<tr>
<th>序号</th>
<th>to do list</th>
<th>完成时间</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>给博客增加评论区功能</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>改变代码样式（感觉博客自带对代码爱好者来说不是很友好）</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>更改文章下方博客链接（感觉有点没必要且链接太长有点丑）</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>一键复制功能给加上</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>学习一下markdown的一些语法（好多忘了，用到才去查）</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>学习一下子分类是怎么用的</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>文章密码保护</td>
<td>2022-10-05</td>
</tr>
<tr>
<td>8</td>
<td>博客在线编辑</td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>实现博客托管</td>
<td></td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>再见了，两年的acm生活</title>
    <url>/2022/10/08/%E5%86%8D%E8%A7%81%E4%BA%86%EF%BC%8C%E4%B8%A4%E5%B9%B4%E7%9A%84acm%E7%94%9F%E6%B4%BB/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="963fca48213a3b4cc13eb32a7ab706e1ca52a8d793022823ea1dd314e49c8399">f818c953540b4c9e52799c207375f4a9e51ec0d6f2b5c5feeb02f39cdc4318fc2a9783ca351c6c35593f243fb9937cb796409028c5e90a718e3b67a7d625d966a8947410ccb721e2a206ca7048f2307d0b8b073f10be40ec73f917fb991c8a5782c1351bccda9745f7624562cc2dbe6269b3bc7943d00d105064dca6dc6f907c789d4dcd1339eec717c23ee195b41687ecb0bd861a54b98e10b63c1695c71cecdde41465736da5bff6c3eefbe13057ca4b584ae5ea018d7cf9a8aa57b041eb284a4dc2ad222d7744b6d8bd4f00b53297ab354e6eddf104d63c711a219e3255e55d601b3b26d7827359db75631a665edceb70fd9481be148e0193bb6cf51e6750509ec59963f676f6c8ae775b8fc282dfdcdc11993e660c7fb6c2e93f96c6ad247cc66bd1ad4de1f54729be132ecea876f0a6856bbe0c08fc81ec66aae3c482e946065ad28ff658c476a6e06d916386b57376f3d58ed1fb6e5c52c60ffcd4caee7cb17ae95c48805b29dfdf7dfbc4eda78089b76ce3e3310008da000d2ad501c62345dd49d4be32e40ee2bcdfb169490ca65da94c0d2b28a6a5cb70a19c9c6058de94630da7b8bbc07ce34e6c9f633be7fb67d5889bc4e063911a0951189a8dadcc9259d2e11a14bbc6c1d0951c81e17390d000102c60562fe3d6a4125882acc374288e2bc9a998674bf2767c1e485c50de984f739af80e8c60befc5c3c8ef3f86f4b627406192805c8aeb44d1a8232247f2b0cc429a0722cf30e23b89777b4669115699a1c5f2441e11fb5e4c21b82e73d81e3c7fe23164253d58f6c63cfdbe3857c585930fcc2190126c517181e4f64e1028bbd99cc8dc46358b9359e198439e614a3bdc2bc7a2c98aafd73857e29b384526721253e978001938f2c116cbda17ac874af96e77fb856dc589eca716011fa6070c2cc243d3f8304d61dd564d4acd11b56a348637186266a92f5dc35dd642fa1cf10c5ad8c139964fec5792e68be2bd90d599dbf07383299a337e38fa764f328df288ee3d2710f765ccf466bc01cad6ec34bd9a9fc6fc1bb0dafeaf8d0c4b55ec9956bd9aa82c76333b22df5e19e86470da8243c7c36489db8cb15b17c87a5eb45967e84d88c86a7274e3d55c32ea6306fc7911a52127aad2502ae17086ae9d2fe0d41a7ed735a159956708acb54628ec8fc0d6e3ae6a06c33fa89f8bf32b9fe7e9dd2c82089a3bf62a1b96de9298935798f0225df3c74f0d7ca81c3657f39674a929c74afee2230987459209c01bf29d88e6f36a5bba86bf157cc6ddfe772ce5dc92f4c870eaefdfe77ad28e9d51ed2957898394a8608ac9c64b76de6ba1ba7d02a99eb0db3ed49250c2ab0fb129c632acdbabde91cb5a2c587e582577496572d53a515b77645c7d8877bb53abd7ae9a0c8225c3c3ed5d01eac2da1ddc32dd331d840073448117ea177c5093e9d55840e40449375d55a75e6f7e8bbc32f31c520a9f5a796998e635b66720664cec15d02b6ef2d4cf6b6b12f6757528f920ad32ffb71b1e839b3bb8943fba8b1566e54ecd30c921c94baca5424ed10fc75c621bd676328a771f26e8117ab8e3cf8e13422c0263d5c3e1209dcae679bc07a69659f4405a8c501d74a426e62cd26d4656c7e5dce2c9a8a0bda310b87c436f3701aa2814e68f0b7e2258b9c545b4336985399ddc861fe058fda920604eeb18dc0ea6b93b3a4fbf272953eef20e310207483810fb05f7c827efc93863fefc01b53a5ffc744a42b3816cbcfefa3f34b666eb09412953deafe9074a5a81e3dabfd16c50d371fcfa55db9d74ff9606f658c83ca75a2c8bd9fa2f1b7111ad0a2bfd3e530670b2df23573b421492deec40c9df206e81bb3954e2b317a8e96c2402b11db7e6ca08e6d7e163dfb8592c3895604d52e0b1f27a4a63c5c19a1c09eca4248c9cfba279a17d27f358a9c14ea8dcec1ce1188847188a432d9003a8d2d854f53e7eca94f4f9d969c3cd23a2c1ab519b5764ac3a6403381d0d5dc54e82456db9d510ec096547433ddcc7972a89e99d57fd5c1d3cc42ffb7990d03f6adfb7be48c79477527c03ad72b1e1811b41e8c77b35a920febab34327f377e5000698cacab7236aaf18a83d570ac1f294bb8360533e83c21d853f6e96fdb73383c1f3e6e919f215b0865856e04c9fc5b100c80649dcc4d24b9723ba0946247ee91058113451d49c172071e823a3c0c33b3488f18e4881399cc2fcca2830b5f2e239f694f0c4416247be4968b99b9b22ed87f7d139060a7ea964bc7cb6716fda555cfe9c43be1c610c39ff60146428120197940945e8b5739926ce280a653bf5e9d4db36ffe9e5d79559e300643d8419d9f675eddaa2a7f2fd3bae03efc960eaf39eea5bf9ea5b164e237f50cf30e7bbbe330bfb9ecbb920285b0b1dca03df684f86841af29a3dccf96d1c8a2bc71c1746a8c7c1662e60aae94141eea4881c1da50e9563c0c2088cfea9a815f6eddd9e841392e95e3f9cd918b03c56f7d16fcd97b75b039b050ee410128d6495e88068a7b81db58975a3757556260d36e2bc2080a9cff198a2aa424a1e53940fe793d15cffea9305f8e1703e0ead94cbbb6efe59c3c02333c5eb1ca846627322533f193e04dd90129f132a5c4bf7143b1d0522c560a968674d57558ba10e8c166676442c6a066b90013e4699e283a45d6edec438d1e3b09aaff2345a32fea7dc611a866a7655c206fb7d939e6390f122c469b1ea732b51e51201db39c488b0945d1e962003f5d0dbb0a384e56c02ee4cb5fa4298e2a28b2931f407a92318b6426eeb52f8392473f475c824c21b968ee83805fbae50eb1f84ebe8fb7e2cd89b8c1fd14cba8f3406077f33e547062f80d1e9c6ffa766ca0afbfb2cc0e45593884a5934178b9d777e1b45ff0a6c05de1fe49eebe3ea4440a734c42ac528ecbf781efa4bf6b00a65e9bab5151e792472049f7913ac6c4fa9538434f477bb40a7bdd68f68d1d90ca10dea7fb1885a0edb5022e5b5b99eb5c73a8d0cf4eacd49e9193e5d9ede30a3d3e9f6e53c43ce9fe7405a3598718933e888fc0b1a8bd98f9acaed39268e5d854d0dc8b955c401e20add3a7c540e58feaef6da2d9e22ac93a2b4d5fb66a9b6cc35c4b97038e7fcbda352f762095ff61f0112f83b165cd3a9912a77c566e3c8ba49d4af9182081801f1c7402410344ce34a32e3f8386b837f995a22abe36b45afd37cfeb3001a9aac94bacbeef77d826e760103e305dd086e016d086d84da1697c9c291238f445028462f8cb6b67c01e40f8ecb86351a5c7c9eb042cf0a70f65fcaa9164d3d39d5534be0172f9331ebb75e360344de6ff1987983d6170fb05fb0e3e7e056dda3af89edb263cbd996236f41e6af178f7b31e277200173f666439925a9c44023b84b477d9472bbe10b48ddd830a53</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统实训_基于多级目录的文件管理系统</title>
    <url>/2022/07/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD-%E5%9F%BA%E4%BA%8E%E5%A4%9A%E7%BA%A7%E7%9B%AE%E5%BD%95%E7%9A%84%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<!-- SDUT操作系统实训，第一次通宵写作业，记录一下 -->

<p>1、实训报告：<a href="https://github.com/mbwsfy0110/OS-Practical-training">github实训报告</a></p>
<p> 2、代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基于多级文件目录的文件管理系统</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">file</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    vector&lt;string&gt; vet; <span class="comment">//当前文件中存储的内容</span></span><br><span class="line">    string where;<span class="comment">//用来记录当前文件的位置</span></span><br><span class="line">    <span class="type">int</span> year,month,day,hour,minute,seconds;</span><br><span class="line">    <span class="type">int</span> _size;</span><br><span class="line">&#125;b[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">directory</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    vector&lt; pair&lt;string,<span class="type">int</span>&gt; &gt; hold;<span class="comment">//记录当前文件存储的文件,pair表示当前的存储是文件还是目录</span></span><br><span class="line">    map&lt;string,<span class="type">int</span>&gt; is_file; <span class="comment">//当前目录下是否存在某个名字的文件</span></span><br><span class="line">    map&lt;string,<span class="type">int</span>&gt; is_directory; <span class="comment">//当前目录下是否存在某个目录</span></span><br><span class="line">    string where;<span class="comment">//用来记录当前目录的位置</span></span><br><span class="line">    string pre;<span class="comment">//上一个文件，用来回到上一个目录</span></span><br><span class="line">    <span class="type">int</span> year,month,day,hour,minute,seconds;</span><br><span class="line">    <span class="type">int</span> _size;</span><br><span class="line">&#125;a[N];</span><br><span class="line">vector&lt; pair&lt;string,<span class="type">int</span>&gt; &gt; fid[N];<span class="comment">//存储某个名字所有出现的位置，如果second = 0，表示已经被删除</span></span><br><span class="line">map&lt;string,<span class="type">int</span> &gt; file_directory;<span class="comment">//找到某个文件或者目录存储的位置</span></span><br><span class="line"><span class="type">int</span> cnt;<span class="comment">//表示每个名字对应的位置</span></span><br><span class="line"><span class="type">int</span> cnt1, cnt2;<span class="comment">//表示存储的文件和目录的位置</span></span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;<span class="comment">//表示当前所在目录的坐标</span></span><br><span class="line"><span class="type">char</span> place[N];<span class="comment">//表示当前位置</span></span><br><span class="line"><span class="comment">//1表示目录，0表示文件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">manage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改变字符显示颜色</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">COLOR_PRINT</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s, <span class="type">int</span> color)</span></span>&#123;</span><br><span class="line">    HANDLE handle = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line">    <span class="built_in">SetConsoleTextAttribute</span>(handle, FOREGROUND_INTENSITY | color);</span><br><span class="line">    <span class="built_in">printf</span>(s);</span><br><span class="line">    <span class="built_in">SetConsoleTextAttribute</span>(handle, FOREGROUND_INTENSITY | <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_systime</span><span class="params">(<span class="type">int</span> tmp_stt, <span class="type">int</span> tmp_cnt)</span></span>&#123; <span class="comment">//tmp_cnt表示要进行操作的文件或目录的位置</span></span><br><span class="line">    <span class="type">time_t</span> rawtime;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">tm</span> *ptminfo;</span><br><span class="line">    <span class="built_in">time</span>(&amp;rawtime);</span><br><span class="line">    ptminfo = <span class="built_in">localtime</span>(&amp;rawtime);</span><br><span class="line">    <span class="keyword">if</span>(tmp_stt == <span class="number">1</span>)&#123; <span class="comment">//为1表示要对目录时间信息进行更新</span></span><br><span class="line">        a[tmp_cnt].year = ptminfo-&gt;tm_year + <span class="number">1900</span>;</span><br><span class="line">        a[tmp_cnt].month = ptminfo-&gt;tm_mon + <span class="number">1</span>;</span><br><span class="line">        a[tmp_cnt].day = ptminfo-&gt;tm_mday;</span><br><span class="line">        a[tmp_cnt].hour = ptminfo-&gt;tm_hour;</span><br><span class="line">        a[tmp_cnt].minute = ptminfo-&gt;tm_min;</span><br><span class="line">        a[tmp_cnt].seconds = ptminfo-&gt;tm_sec;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123; <span class="comment">//为0表示要对文件时间信息进行更新</span></span><br><span class="line">        b[tmp_cnt].year = ptminfo-&gt;tm_year + <span class="number">1900</span>;</span><br><span class="line">        b[tmp_cnt].month = ptminfo-&gt;tm_mon + <span class="number">1</span>;</span><br><span class="line">        b[tmp_cnt].day = ptminfo-&gt;tm_mday;</span><br><span class="line">        b[tmp_cnt].hour = ptminfo-&gt;tm_hour;</span><br><span class="line">        b[tmp_cnt].minute = ptminfo-&gt;tm_min;</span><br><span class="line">        b[tmp_cnt].seconds = ptminfo-&gt;tm_sec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数用来获取目录和文件的大小</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_size</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> tmp_cnt)</span></span>&#123;<span class="comment">//tmp_cnt为目录或文件所在存储位置</span></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(id == <span class="number">1</span>)&#123; <span class="comment">//获取目录的大小</span></span><br><span class="line">        sum = a[tmp_cnt].is_file.<span class="built_in">size</span>() + a[tmp_cnt].is_directory.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123; <span class="comment">//获取文件的大小</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; b[tmp_cnt].vet.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            sum += b[tmp_cnt].vet[i].<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现目录打开功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">open</span><span class="params">(string poss)</span></span>&#123; <span class="comment">//poss表示要打开的目录的名字</span></span><br><span class="line">    <span class="keyword">if</span>(poss == <span class="string">&quot;..&quot;</span>)&#123; <span class="comment">//linux命令行，cd ..表示返回上一级目录</span></span><br><span class="line">        <span class="keyword">if</span>(pos &gt;= <span class="number">1</span>) pos --;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt;<span class="string">&quot;wrong: wrong return!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//判断当前目录中是否含有要打开的目录文件</span></span><br><span class="line">        <span class="keyword">if</span>(a[pos].is_directory.<span class="built_in">find</span>(poss) == a[pos].is_directory.<span class="built_in">end</span>())&#123;</span><br><span class="line">            cout &lt;&lt;<span class="string">&quot;-bash: cd: &quot;</span> &lt;&lt; poss &lt;&lt;<span class="string">&quot; : Not a directory&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            pos = a[pos].is_directory[poss];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数用来实现新建目录功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mkdir</span><span class="params">(string poss)</span></span>&#123; <span class="comment">//poss表示所要新建的目录的名字</span></span><br><span class="line">    <span class="keyword">if</span>(a[pos].is_directory.<span class="built_in">find</span>(poss) != a[pos].is_directory.<span class="built_in">end</span>())&#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;warning: duplicate directories!&quot;</span>&lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cnt1 ++;</span><br><span class="line">        string tmp_pos = a[pos].where;</span><br><span class="line">        tmp_pos += <span class="string">&quot;/&quot;</span>;</span><br><span class="line">        tmp_pos += a[pos].name;</span><br><span class="line">        <span class="keyword">if</span>(file_directory.<span class="built_in">find</span>(poss) == file_directory.<span class="built_in">end</span>())&#123;</span><br><span class="line">            cnt ++;</span><br><span class="line">            file_directory[poss] = cnt;</span><br><span class="line">            fid[cnt].<span class="built_in">push_back</span>(&#123;tmp_pos,<span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> x = file_directory[poss];</span><br><span class="line">            fid[cnt].<span class="built_in">push_back</span>(&#123;tmp_pos,<span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        a[cnt1].name = poss;</span><br><span class="line">        a[cnt1].where = tmp_pos;</span><br><span class="line">        <span class="built_in">get_systime</span>(<span class="number">1</span>,cnt1); <span class="comment">//获取新建目录时的系统时间</span></span><br><span class="line">        a[pos].hold.<span class="built_in">push_back</span>(&#123;poss,<span class="number">1</span>&#125;);</span><br><span class="line">        a[pos].is_directory[poss] = cnt1;</span><br><span class="line">        a[cnt1].pre = a[pos].name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该函数用来实现新建文件功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">touch</span><span class="params">(string name, <span class="type">int</span> stt)</span></span>&#123; <span class="comment">//name表示所要新建的文件名</span></span><br><span class="line">    string tmp_pos = a[pos].where;</span><br><span class="line">    tmp_pos += <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    tmp_pos += a[pos].name;</span><br><span class="line">    <span class="keyword">if</span>(file_directory.<span class="built_in">find</span>(name) == file_directory.<span class="built_in">end</span>())&#123;<span class="comment">//查找和判断</span></span><br><span class="line">        cnt ++;</span><br><span class="line">        file_directory[name] = cnt;</span><br><span class="line">        fid[cnt].<span class="built_in">push_back</span>(&#123;tmp_pos,<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> x = file_directory[name];</span><br><span class="line">        fid[x].<span class="built_in">push_back</span>(&#123;tmp_pos,<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[pos].is_file.<span class="built_in">find</span>(name) != a[pos].is_file.<span class="built_in">end</span>())&#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;warning: duplicate files!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">manage</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cnt2 ++;<span class="comment">//更新相应数据结构</span></span><br><span class="line">    b[cnt2].where =tmp_pos;</span><br><span class="line">    b[cnt2].name = name;</span><br><span class="line">    <span class="built_in">get_systime</span>(<span class="number">0</span>,cnt2); <span class="comment">//获取新建文件时的系统时间</span></span><br><span class="line">    a[pos].hold.<span class="built_in">push_back</span>(&#123;name,<span class="number">0</span>&#125;);</span><br><span class="line">    a[pos].is_file[name] = cnt2;</span><br><span class="line">    <span class="keyword">if</span>(stt == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">manage</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">echo</span><span class="params">(string st)</span></span>&#123;<span class="comment">//st表示想要写到文件中的信息</span></span><br><span class="line">    string s;</span><br><span class="line">    s.<span class="built_in">clear</span>();</span><br><span class="line">    string postion;</span><br><span class="line">    postion.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; st.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(st[i] == <span class="string">&#x27;&quot;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s += st[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = i + <span class="number">2</span>; i &lt; st.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        postion += st[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[pos].is_file.<span class="built_in">find</span>(postion) == a[pos].is_file.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="comment">//查找所想要写入的文件是否存在，不存在进行创建文件和写入</span></span><br><span class="line">        <span class="keyword">if</span>(a[pos].is_directory.<span class="built_in">find</span>(postion) == a[pos].is_directory.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="built_in">touch</span>(postion, <span class="number">0</span>);</span><br><span class="line">            b[cnt2].vet.<span class="built_in">push_back</span>(s);</span><br><span class="line">            cout &lt;&lt; b[cnt2]._size &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt;<span class="string">&quot;wrong: Illegal naming!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123; <span class="comment">//存在的话，直接查询文件位置，然后进行信息写入即可</span></span><br><span class="line">        <span class="type">int</span> x = a[pos].is_file[postion];</span><br><span class="line">        b[x].vet.<span class="built_in">push_back</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该函数实现正向读取文件内容</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cat</span><span class="params">(string poss)</span></span>&#123; <span class="comment">//poss表示</span></span><br><span class="line">    <span class="keyword">if</span>(a[pos].is_file.<span class="built_in">find</span>(poss) == a[pos].is_file.<span class="built_in">end</span>())&#123; <span class="comment">//如果找不到文件就报错</span></span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;cat &quot;</span> &lt;&lt; poss &lt;&lt;<span class="string">&quot;: No such file or directory&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//找到文件直接正向读取文件信息即可</span></span><br><span class="line">        <span class="type">int</span> x = a[pos].is_file[poss];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; b[x].vet.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            cout &lt;&lt; b[x].vet[i] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该函数实现反向读取文件内容</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tac</span><span class="params">(string poss)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[pos].is_file.<span class="built_in">find</span>(poss) == a[pos].is_file.<span class="built_in">end</span>())&#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;cat &quot;</span> &lt;&lt; poss &lt;&lt;<span class="string">&quot;: No such file or directory&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> x = a[pos].is_file[poss];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = b[x].vet.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            cout &lt;&lt; b[x].vet[i] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(string order)</span></span>&#123; <span class="comment">//order表示展示命令</span></span><br><span class="line">    <span class="type">int</span> tmp_tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(order == <span class="string">&quot;all&quot;</span>)&#123; <span class="comment">//如果展示命令为all，则展示粗略包含信息</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a[pos].hold.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            string st = a[pos].hold[i].first;</span><br><span class="line">            <span class="type">char</span> tmp[M];</span><br><span class="line">            <span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span> tmp);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; st.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                tmp[j] = st[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[pos].hold[i].second == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">COLOR_PRINT</span>(tmp,<span class="number">7</span>);</span><br><span class="line">                tmp_tot ++;</span><br><span class="line">                cout &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="built_in">COLOR_PRINT</span>(tmp,<span class="number">1</span>);</span><br><span class="line">               tmp_tot ++;</span><br><span class="line">               cout &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmp_tot == <span class="number">0</span>) cout &lt;&lt;<span class="string">&quot;warning:is null&quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123; <span class="comment">//如果为-l,则展示详细信息，包括建立时间，大小和名称</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a[pos].hold.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            string st = a[pos].hold[i].first;</span><br><span class="line">            <span class="type">char</span> tmp[M];</span><br><span class="line">            <span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span> tmp);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; st.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                tmp[j] = st[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> tmp_pos;</span><br><span class="line">            <span class="keyword">if</span>(a[pos].hold[i].second == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[pos].is_directory.<span class="built_in">find</span>(st) != a[pos].is_directory.<span class="built_in">end</span>()) tmp_pos = a[pos].is_directory[st];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(tmp_tot == <span class="number">0</span>)&#123; <span class="comment">//输出目录的相关信息</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;create time\t\tsize\tname\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%02d-%02d-%02d %02d:%02d:%02d\t&quot;</span>,a[tmp_pos].year,a[tmp_pos].month, a[tmp_pos].day,</span><br><span class="line">                a[tmp_pos].hour, a[tmp_pos].minute,a[tmp_pos].seconds);</span><br><span class="line">                cout &lt;&lt; <span class="built_in">get_size</span>(<span class="number">1</span>,tmp_pos)&lt;&lt;<span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">                <span class="built_in">COLOR_PRINT</span>(tmp,<span class="number">7</span>);</span><br><span class="line">                tmp_tot ++;</span><br><span class="line">                cout &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123; <span class="comment">//输出文件的相关信息</span></span><br><span class="line">               <span class="keyword">if</span>(a[pos].is_file.<span class="built_in">find</span>(st) != a[pos].is_file.<span class="built_in">end</span>()) tmp_pos = a[pos].is_file[st];</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">               <span class="keyword">if</span>(tmp_tot == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;create time\t\tsize\tname\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;%02d-%02d-%02d %02d:%02d:%02d\t&quot;</span>,b[tmp_pos].year,b[tmp_pos].month, b[tmp_pos].day,</span><br><span class="line">                b[tmp_pos].hour, b[tmp_pos].minute,b[tmp_pos].seconds);</span><br><span class="line">                cout &lt;&lt;  <span class="built_in">get_size</span>(<span class="number">0</span>,tmp_pos)&lt;&lt;<span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">               <span class="built_in">COLOR_PRINT</span>(tmp,<span class="number">1</span>);</span><br><span class="line">               tmp_tot ++;</span><br><span class="line">                cout &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmp_tot == <span class="number">0</span>) cout &lt;&lt;<span class="string">&quot;warning:is null&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find_where</span><span class="params">(string name)</span></span>&#123; <span class="comment">//寻找名称为name的文件和目录</span></span><br><span class="line">    <span class="type">int</span> tmp_tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_directory.<span class="built_in">find</span>(name) == file_directory.<span class="built_in">end</span>())&#123; <span class="comment">//如果找不到，输出提示信息</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;can&#x27;t find!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//找到了，遍历进行输出</span></span><br><span class="line">        <span class="type">int</span> x = file_directory[name];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; fid[x].<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fid[x][i].second == <span class="number">1</span>)&#123;</span><br><span class="line">                cout &lt;&lt; fid[x][i].first &lt;&lt; endl;</span><br><span class="line">                tmp_tot ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找不到，输出错误提示信息</span></span><br><span class="line">        <span class="keyword">if</span>(tmp_tot == <span class="number">0</span>) cout &lt;&lt;<span class="string">&quot;can&#x27;t find!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">manage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string order1,order2;</span><br><span class="line">    <span class="built_in">COLOR_PRINT</span>(<span class="string">&quot;/home/user@LAPTOP-MFH2B9V0:&quot;</span>,<span class="number">2</span>);</span><br><span class="line">    string tmp_st = a[pos].where;</span><br><span class="line">    tmp_st +=<span class="string">&quot;/&quot;</span>;</span><br><span class="line">    tmp_st += a[pos].name;</span><br><span class="line">    <span class="built_in">memset</span>(place, <span class="number">0</span>, <span class="keyword">sizeof</span> place);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tmp_st.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        place[i] = tmp_st[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">COLOR_PRINT</span>(place,<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;$ &quot;</span>;</span><br><span class="line">    cin &gt;&gt; order1 &gt;&gt; order2;</span><br><span class="line">    <span class="keyword">if</span>(order1 == <span class="string">&quot;mkdir&quot;</span>)&#123; <span class="comment">//新建目录指令</span></span><br><span class="line">        <span class="built_in">mkdir</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;touch&quot;</span>)&#123;<span class="comment">//新建文件指令</span></span><br><span class="line">        <span class="built_in">touch</span>(order2, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;cd&quot;</span>)&#123;<span class="comment">//打开目录/返回上一级目录</span></span><br><span class="line">        <span class="built_in">open</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;echo&quot;</span>)&#123;<span class="comment">//写入信息到文件中去</span></span><br><span class="line">        <span class="built_in">echo</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;cat&quot;</span>)&#123;<span class="comment">//正向读取文件</span></span><br><span class="line">        <span class="built_in">cat</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;tac&quot;</span>)&#123;<span class="comment">//反向读取文件</span></span><br><span class="line">        <span class="built_in">tac</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;ls&quot;</span>)&#123;<span class="comment">//展示目录中所含的文件、子目录信息</span></span><br><span class="line">        <span class="built_in">show</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;find&quot;</span>)&#123;<span class="comment">//按名查找</span></span><br><span class="line">        <span class="built_in">find_where</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;command &#x27;&quot;</span> &lt;&lt; order1 &lt;&lt;<span class="string">&quot;&#x27; not found&quot;</span> &lt;&lt; endl; <span class="comment">//指令不存在报错</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//一些初始化操作</span></span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;Welcome to OS_work Page (Design Based on Linux)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt;endl;</span><br><span class="line">    a[<span class="number">0</span>].name = <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    file_directory[<span class="string">&quot;~/home&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">    a[<span class="number">0</span>].where = <span class="string">&quot;~/home&quot;</span>;</span><br><span class="line">    place[<span class="number">0</span>] = <span class="string">&#x27;~&#x27;</span>;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>实训</category>
      </categories>
      <tags>
        <tag>实训</tag>
      </tags>
  </entry>
  <entry>
    <title>清醒自律,热爱生活</title>
    <url>/2022/10/05/%E6%B8%85%E9%86%92%E8%87%AA%E5%BE%8B-%E7%83%AD%E7%88%B1%E7%94%9F%E6%B4%BB/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9804788df5f1aa31157fc0391b5c0b32b85360f4365ec19992b59d84b04d6116">7763ba0d8906c78f6d10e0023d32f7d513d52c310de14a4cc9a2a868f509c2dd1b930fdfbef8ab2fc1e1e39c7da71d1cde69fbf8cfb6a25d617d81f092082f398b5ee16defff788f3d47fad71d79e5400851853f521d9dcbf58035bd4403be8ed424abe61e777adf3d7ff705e24ef4737b3a11f9d1f6c50df4e8704928914e20</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>编译原理作业及相关知识点</title>
    <url>/2022/10/05/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%E4%BD%9C%E4%B8%9A%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h3 id="第四章作业及相关知识点"><a href="#第四章作业及相关知识点" class="headerlink" title=" 第四章作业及相关知识点 "></a><font color=#008000> 第四章作业及相关知识点 </font></h3><h4 id="一、第一题知识点"><a href="#一、第一题知识点" class="headerlink" title="一、第一题知识点"></a>一、第一题知识点</h4><h5 id="1、消除左递归"><a href="#1、消除左递归" class="headerlink" title="1、消除左递归"></a><strong>1、消除左递归</strong></h5><p>$P → Pα｜β$等价于$P→βP’（P’$为新增加的非终结符$）, P’→αP’｜ε$</p>
<h5 id="2、判断一个上下文无关文法是-LL-1-文法"><a href="#2、判断一个上下文无关文法是-LL-1-文法" class="headerlink" title="2、判断一个上下文无关文法是$LL(1)$文法"></a><strong>2、判断一个上下文无关文法是$LL(1)$文法</strong></h5><p>一个上下文无关文法是LL(1)文法的充分必要条件是，对每个非终结符的两个不同的产生式，$A→α，A→β$，满足：$SELECT(A→α)∩SELECT(A→β)&#x3D; φ$</p>
<h5 id="3、求-select-集"><a href="#3、求-select-集" class="headerlink" title="3、求$select$集"></a><strong>3、求$select$集</strong></h5><p>设$G&#x3D;(Ｖ_T，Ｖ_N，S，P） α∈Ｖ* $<br>$FIRST(α)&#x3D;{a|α&#x3D;&#x3D;<em>&gt; aβ，a∈Ｖ_T}$<br>若$α&#x3D;&#x3D;</em>&gt;ε$，则$SELECT(A→α)&#x3D; FIRST(α)$<br>若$α&#x3D;&#x3D;*&gt;ε$，则$SELECT(A→α) &#x3D; (FIRST(α)-{ε})∪FOLLOW(A)$</p>
<h5 id="4、求-first-集"><a href="#4、求-first-集" class="headerlink" title="4、求$first$集"></a><strong>4、求$first$集</strong></h5><p>设$G&#x3D;(Ｖ_T，Ｖ_N，S，P） α∈Ｖ* $<br>$FIRST(α)&#x3D;{a|α&#x3D;&#x3D;<em>&gt; aβ，a∈Ｖ_T}$<br>若$α&#x3D;&#x3D;</em>&gt;ε，则ε∈FIRST(α)$<br>$FIRST(α)$是$α$的所有可能推导的首遇终结符号或ε，是选择产生式的依据。</p>
<h5 id="5、求-follow-集"><a href="#5、求-follow-集" class="headerlink" title="5、求$follow$集"></a><strong>5、求$follow$集</strong></h5><p>$A∈Ｖ_N$<br>$FOLLOW(A)&#x3D;{ a｜S&#x3D;&#x3D;<em>&gt;…Aa…，a∈Ｖ_T }$<br>若$S&#x3D;&#x3D;</em>&gt;…A$，则#$∈FOLLOW（A）$<br>‘#’—输入串的结束符 也可看作是句子的括号 #S#<br>$FOLLOW(A)$表示了句型中可能紧跟在$A$后面的终结符号</p>
<h5 id="6、构造预测分析表"><a href="#6、构造预测分析表" class="headerlink" title="6、构造预测分析表"></a><strong>6、构造预测分析表</strong></h5><p>设有文法$G$，预测分析表构造过程：</p>
<ul>
<li>计算所有候选式$α$的首符集 $FIRST（α）$</li>
<li>计算所有非终结符A的后继符集$FOLLOW（A）$</li>
<li>计算所有产生式的$SELECT(A→α)$集合</li>
<li>构造预测分析表  $M$</li>
</ul>
<h5 id="7、根据分析表对输入串进行分析"><a href="#7、根据分析表对输入串进行分析" class="headerlink" title="7、根据分析表对输入串进行分析"></a><strong>7、根据分析表对输入串进行分析</strong></h5>]]></content>
      <tags>
        <tag>编译原理</tag>
      </tags>
  </entry>
</search>
