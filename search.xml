<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>下一件事情</title>
    <url>/2022/10/03/%E4%B8%8B%E4%B8%80%E4%BB%B6%E4%BA%8B%E6%83%85/</url>
    <content><![CDATA[<p><img src="https://user-images.githubusercontent.com/99975690/193596772-29a32b3a-9baa-4dc2-a718-9c1a37c6163a.jpg" alt="v2-10fb0670c436035f9a97611cb03fdf9c_1440w" loading="lazy"></p>
<table>
<thead>
<tr>
<th>序号</th>
<th>to do list</th>
<th>完成时间</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>给博客增加评论区功能</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>改变代码样式（感觉博客自带对代码爱好者来说不是很友好）</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>更改文章下方博客链接（感觉有点没必要且链接太长有点丑）</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>一键复制功能给加上</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>学习一下markdown的一些语法（好多忘了，用到才去查）</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>学习一下子分类是怎么用的</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>文章密码保护</td>
<td>2022-10-05</td>
</tr>
<tr>
<td>8</td>
<td>博客在线编辑</td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>实现博客托管</td>
<td></td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>清醒自律,热爱生活</title>
    <url>/2022/10/05/%E6%B8%85%E9%86%92%E8%87%AA%E5%BE%8B-%E7%83%AD%E7%88%B1%E7%94%9F%E6%B4%BB/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9804788df5f1aa31157fc0391b5c0b32b85360f4365ec19992b59d84b04d6116">7763ba0d8906c78f6d10e0023d32f7d513d52c310de14a4cc9a2a868f509c2dd1b930fdfbef8ab2fc1e1e39c7da71d1cde69fbf8cfb6a25d617d81f092082f398b5ee16defff788f3d47fad71d79e5400851853f521d9dcbf58035bd4403be8ed424abe61e777adf3d7ff705e24ef4737b3a11f9d1f6c50df4e8704928914e20</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入文章密码！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统实训_基于多级目录的文件管理系统</title>
    <url>/2022/07/07/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E8%AE%AD-%E5%9F%BA%E4%BA%8E%E5%A4%9A%E7%BA%A7%E7%9B%AE%E5%BD%95%E7%9A%84%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<!-- SDUT操作系统实训，第一次通宵写作业，记录一下 -->

<p>1、实训报告：<a href="https://github.com/mbwsfy0110/OS-Practical-training">github实训报告</a></p>
<p> 2、代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基于多级文件目录的文件管理系统</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl <span class="string">&#x27;\n&#x27;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">file</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    vector&lt;string&gt; vet; <span class="comment">//当前文件中存储的内容</span></span><br><span class="line">    string where;<span class="comment">//用来记录当前文件的位置</span></span><br><span class="line">    <span class="type">int</span> year,month,day,hour,minute,seconds;</span><br><span class="line">    <span class="type">int</span> _size;</span><br><span class="line">&#125;b[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">directory</span>&#123;</span><br><span class="line">    string name;</span><br><span class="line">    vector&lt; pair&lt;string,<span class="type">int</span>&gt; &gt; hold;<span class="comment">//记录当前文件存储的文件,pair表示当前的存储是文件还是目录</span></span><br><span class="line">    map&lt;string,<span class="type">int</span>&gt; is_file; <span class="comment">//当前目录下是否存在某个名字的文件</span></span><br><span class="line">    map&lt;string,<span class="type">int</span>&gt; is_directory; <span class="comment">//当前目录下是否存在某个目录</span></span><br><span class="line">    string where;<span class="comment">//用来记录当前目录的位置</span></span><br><span class="line">    string pre;<span class="comment">//上一个文件，用来回到上一个目录</span></span><br><span class="line">    <span class="type">int</span> year,month,day,hour,minute,seconds;</span><br><span class="line">    <span class="type">int</span> _size;</span><br><span class="line">&#125;a[N];</span><br><span class="line">vector&lt; pair&lt;string,<span class="type">int</span>&gt; &gt; fid[N];<span class="comment">//存储某个名字所有出现的位置，如果second = 0，表示已经被删除</span></span><br><span class="line">map&lt;string,<span class="type">int</span> &gt; file_directory;<span class="comment">//找到某个文件或者目录存储的位置</span></span><br><span class="line"><span class="type">int</span> cnt;<span class="comment">//表示每个名字对应的位置</span></span><br><span class="line"><span class="type">int</span> cnt1, cnt2;<span class="comment">//表示存储的文件和目录的位置</span></span><br><span class="line"><span class="type">int</span> pos = <span class="number">0</span>;<span class="comment">//表示当前所在目录的坐标</span></span><br><span class="line"><span class="type">char</span> place[N];<span class="comment">//表示当前位置</span></span><br><span class="line"><span class="comment">//1表示目录，0表示文件</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">manage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//改变字符显示颜色</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">COLOR_PRINT</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* s, <span class="type">int</span> color)</span></span>&#123;</span><br><span class="line">    HANDLE handle = <span class="built_in">GetStdHandle</span>(STD_OUTPUT_HANDLE);</span><br><span class="line">    <span class="built_in">SetConsoleTextAttribute</span>(handle, FOREGROUND_INTENSITY | color);</span><br><span class="line">    <span class="built_in">printf</span>(s);</span><br><span class="line">    <span class="built_in">SetConsoleTextAttribute</span>(handle, FOREGROUND_INTENSITY | <span class="number">7</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_systime</span><span class="params">(<span class="type">int</span> tmp_stt, <span class="type">int</span> tmp_cnt)</span></span>&#123; <span class="comment">//tmp_cnt表示要进行操作的文件或目录的位置</span></span><br><span class="line">    <span class="type">time_t</span> rawtime;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">tm</span> *ptminfo;</span><br><span class="line">    <span class="built_in">time</span>(&amp;rawtime);</span><br><span class="line">    ptminfo = <span class="built_in">localtime</span>(&amp;rawtime);</span><br><span class="line">    <span class="keyword">if</span>(tmp_stt == <span class="number">1</span>)&#123; <span class="comment">//为1表示要对目录时间信息进行更新</span></span><br><span class="line">        a[tmp_cnt].year = ptminfo-&gt;tm_year + <span class="number">1900</span>;</span><br><span class="line">        a[tmp_cnt].month = ptminfo-&gt;tm_mon + <span class="number">1</span>;</span><br><span class="line">        a[tmp_cnt].day = ptminfo-&gt;tm_mday;</span><br><span class="line">        a[tmp_cnt].hour = ptminfo-&gt;tm_hour;</span><br><span class="line">        a[tmp_cnt].minute = ptminfo-&gt;tm_min;</span><br><span class="line">        a[tmp_cnt].seconds = ptminfo-&gt;tm_sec;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123; <span class="comment">//为0表示要对文件时间信息进行更新</span></span><br><span class="line">        b[tmp_cnt].year = ptminfo-&gt;tm_year + <span class="number">1900</span>;</span><br><span class="line">        b[tmp_cnt].month = ptminfo-&gt;tm_mon + <span class="number">1</span>;</span><br><span class="line">        b[tmp_cnt].day = ptminfo-&gt;tm_mday;</span><br><span class="line">        b[tmp_cnt].hour = ptminfo-&gt;tm_hour;</span><br><span class="line">        b[tmp_cnt].minute = ptminfo-&gt;tm_min;</span><br><span class="line">        b[tmp_cnt].seconds = ptminfo-&gt;tm_sec;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数用来获取目录和文件的大小</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_size</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> tmp_cnt)</span></span>&#123;<span class="comment">//tmp_cnt为目录或文件所在存储位置</span></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(id == <span class="number">1</span>)&#123; <span class="comment">//获取目录的大小</span></span><br><span class="line">        sum = a[tmp_cnt].is_file.<span class="built_in">size</span>() + a[tmp_cnt].is_directory.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123; <span class="comment">//获取文件的大小</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; b[tmp_cnt].vet.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            sum += b[tmp_cnt].vet[i].<span class="built_in">size</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现目录打开功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">open</span><span class="params">(string poss)</span></span>&#123; <span class="comment">//poss表示要打开的目录的名字</span></span><br><span class="line">    <span class="keyword">if</span>(poss == <span class="string">&quot;..&quot;</span>)&#123; <span class="comment">//linux命令行，cd ..表示返回上一级目录</span></span><br><span class="line">        <span class="keyword">if</span>(pos &gt;= <span class="number">1</span>) pos --;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt;<span class="string">&quot;wrong: wrong return!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//判断当前目录中是否含有要打开的目录文件</span></span><br><span class="line">        <span class="keyword">if</span>(a[pos].is_directory.<span class="built_in">find</span>(poss) == a[pos].is_directory.<span class="built_in">end</span>())&#123;</span><br><span class="line">            cout &lt;&lt;<span class="string">&quot;-bash: cd: &quot;</span> &lt;&lt; poss &lt;&lt;<span class="string">&quot; : Not a directory&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            pos = a[pos].is_directory[poss];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该函数用来实现新建目录功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mkdir</span><span class="params">(string poss)</span></span>&#123; <span class="comment">//poss表示所要新建的目录的名字</span></span><br><span class="line">    <span class="keyword">if</span>(a[pos].is_directory.<span class="built_in">find</span>(poss) != a[pos].is_directory.<span class="built_in">end</span>())&#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;warning: duplicate directories!&quot;</span>&lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cnt1 ++;</span><br><span class="line">        string tmp_pos = a[pos].where;</span><br><span class="line">        tmp_pos += <span class="string">&quot;/&quot;</span>;</span><br><span class="line">        tmp_pos += a[pos].name;</span><br><span class="line">        <span class="keyword">if</span>(file_directory.<span class="built_in">find</span>(poss) == file_directory.<span class="built_in">end</span>())&#123;</span><br><span class="line">            cnt ++;</span><br><span class="line">            file_directory[poss] = cnt;</span><br><span class="line">            fid[cnt].<span class="built_in">push_back</span>(&#123;tmp_pos,<span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">int</span> x = file_directory[poss];</span><br><span class="line">            fid[cnt].<span class="built_in">push_back</span>(&#123;tmp_pos,<span class="number">1</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        a[cnt1].name = poss;</span><br><span class="line">        a[cnt1].where = tmp_pos;</span><br><span class="line">        <span class="built_in">get_systime</span>(<span class="number">1</span>,cnt1); <span class="comment">//获取新建目录时的系统时间</span></span><br><span class="line">        a[pos].hold.<span class="built_in">push_back</span>(&#123;poss,<span class="number">1</span>&#125;);</span><br><span class="line">        a[pos].is_directory[poss] = cnt1;</span><br><span class="line">        a[cnt1].pre = a[pos].name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该函数用来实现新建文件功能</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">touch</span><span class="params">(string name, <span class="type">int</span> stt)</span></span>&#123; <span class="comment">//name表示所要新建的文件名</span></span><br><span class="line">    string tmp_pos = a[pos].where;</span><br><span class="line">    tmp_pos += <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    tmp_pos += a[pos].name;</span><br><span class="line">    <span class="keyword">if</span>(file_directory.<span class="built_in">find</span>(name) == file_directory.<span class="built_in">end</span>())&#123;<span class="comment">//查找和判断</span></span><br><span class="line">        cnt ++;</span><br><span class="line">        file_directory[name] = cnt;</span><br><span class="line">        fid[cnt].<span class="built_in">push_back</span>(&#123;tmp_pos,<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> x = file_directory[name];</span><br><span class="line">        fid[x].<span class="built_in">push_back</span>(&#123;tmp_pos,<span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[pos].is_file.<span class="built_in">find</span>(name) != a[pos].is_file.<span class="built_in">end</span>())&#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;warning: duplicate files!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">manage</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cnt2 ++;<span class="comment">//更新相应数据结构</span></span><br><span class="line">    b[cnt2].where =tmp_pos;</span><br><span class="line">    b[cnt2].name = name;</span><br><span class="line">    <span class="built_in">get_systime</span>(<span class="number">0</span>,cnt2); <span class="comment">//获取新建文件时的系统时间</span></span><br><span class="line">    a[pos].hold.<span class="built_in">push_back</span>(&#123;name,<span class="number">0</span>&#125;);</span><br><span class="line">    a[pos].is_file[name] = cnt2;</span><br><span class="line">    <span class="keyword">if</span>(stt == <span class="number">1</span>)</span><br><span class="line">        <span class="built_in">manage</span>();</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">echo</span><span class="params">(string st)</span></span>&#123;<span class="comment">//st表示想要写到文件中的信息</span></span><br><span class="line">    string s;</span><br><span class="line">    s.<span class="built_in">clear</span>();</span><br><span class="line">    string postion;</span><br><span class="line">    postion.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt; st.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(st[i] == <span class="string">&#x27;&quot;&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s += st[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = i + <span class="number">2</span>; i &lt; st.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        postion += st[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a[pos].is_file.<span class="built_in">find</span>(postion) == a[pos].is_file.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="comment">//查找所想要写入的文件是否存在，不存在进行创建文件和写入</span></span><br><span class="line">        <span class="keyword">if</span>(a[pos].is_directory.<span class="built_in">find</span>(postion) == a[pos].is_directory.<span class="built_in">end</span>())&#123;</span><br><span class="line">            <span class="built_in">touch</span>(postion, <span class="number">0</span>);</span><br><span class="line">            b[cnt2].vet.<span class="built_in">push_back</span>(s);</span><br><span class="line">            cout &lt;&lt; b[cnt2]._size &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cout &lt;&lt;<span class="string">&quot;wrong: Illegal naming!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123; <span class="comment">//存在的话，直接查询文件位置，然后进行信息写入即可</span></span><br><span class="line">        <span class="type">int</span> x = a[pos].is_file[postion];</span><br><span class="line">        b[x].vet.<span class="built_in">push_back</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该函数实现正向读取文件内容</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cat</span><span class="params">(string poss)</span></span>&#123; <span class="comment">//poss表示</span></span><br><span class="line">    <span class="keyword">if</span>(a[pos].is_file.<span class="built_in">find</span>(poss) == a[pos].is_file.<span class="built_in">end</span>())&#123; <span class="comment">//如果找不到文件就报错</span></span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;cat &quot;</span> &lt;&lt; poss &lt;&lt;<span class="string">&quot;: No such file or directory&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//找到文件直接正向读取文件信息即可</span></span><br><span class="line">        <span class="type">int</span> x = a[pos].is_file[poss];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; b[x].vet.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            cout &lt;&lt; b[x].vet[i] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//该函数实现反向读取文件内容</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tac</span><span class="params">(string poss)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a[pos].is_file.<span class="built_in">find</span>(poss) == a[pos].is_file.<span class="built_in">end</span>())&#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;cat &quot;</span> &lt;&lt; poss &lt;&lt;<span class="string">&quot;: No such file or directory&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> x = a[pos].is_file[poss];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = b[x].vet.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)&#123;</span><br><span class="line">            cout &lt;&lt; b[x].vet[i] &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">show</span><span class="params">(string order)</span></span>&#123; <span class="comment">//order表示展示命令</span></span><br><span class="line">    <span class="type">int</span> tmp_tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(order == <span class="string">&quot;all&quot;</span>)&#123; <span class="comment">//如果展示命令为all，则展示粗略包含信息</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a[pos].hold.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            string st = a[pos].hold[i].first;</span><br><span class="line">            <span class="type">char</span> tmp[M];</span><br><span class="line">            <span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span> tmp);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; st.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                tmp[j] = st[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a[pos].hold[i].second == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">COLOR_PRINT</span>(tmp,<span class="number">7</span>);</span><br><span class="line">                tmp_tot ++;</span><br><span class="line">                cout &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="built_in">COLOR_PRINT</span>(tmp,<span class="number">1</span>);</span><br><span class="line">               tmp_tot ++;</span><br><span class="line">               cout &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmp_tot == <span class="number">0</span>) cout &lt;&lt;<span class="string">&quot;warning:is null&quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123; <span class="comment">//如果为-l,则展示详细信息，包括建立时间，大小和名称</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; a[pos].hold.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            string st = a[pos].hold[i].first;</span><br><span class="line">            <span class="type">char</span> tmp[M];</span><br><span class="line">            <span class="built_in">memset</span>(tmp, <span class="number">0</span>, <span class="keyword">sizeof</span> tmp);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; st.<span class="built_in">size</span>(); j++)&#123;</span><br><span class="line">                tmp[j] = st[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> tmp_pos;</span><br><span class="line">            <span class="keyword">if</span>(a[pos].hold[i].second == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(a[pos].is_directory.<span class="built_in">find</span>(st) != a[pos].is_directory.<span class="built_in">end</span>()) tmp_pos = a[pos].is_directory[st];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(tmp_tot == <span class="number">0</span>)&#123; <span class="comment">//输出目录的相关信息</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;create time\t\tsize\tname\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%02d-%02d-%02d %02d:%02d:%02d\t&quot;</span>,a[tmp_pos].year,a[tmp_pos].month, a[tmp_pos].day,</span><br><span class="line">                a[tmp_pos].hour, a[tmp_pos].minute,a[tmp_pos].seconds);</span><br><span class="line">                cout &lt;&lt; <span class="built_in">get_size</span>(<span class="number">1</span>,tmp_pos)&lt;&lt;<span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">                <span class="built_in">COLOR_PRINT</span>(tmp,<span class="number">7</span>);</span><br><span class="line">                tmp_tot ++;</span><br><span class="line">                cout &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123; <span class="comment">//输出文件的相关信息</span></span><br><span class="line">               <span class="keyword">if</span>(a[pos].is_file.<span class="built_in">find</span>(st) != a[pos].is_file.<span class="built_in">end</span>()) tmp_pos = a[pos].is_file[st];</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">               <span class="keyword">if</span>(tmp_tot == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;create time\t\tsize\tname\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;%02d-%02d-%02d %02d:%02d:%02d\t&quot;</span>,b[tmp_pos].year,b[tmp_pos].month, b[tmp_pos].day,</span><br><span class="line">                b[tmp_pos].hour, b[tmp_pos].minute,b[tmp_pos].seconds);</span><br><span class="line">                cout &lt;&lt;  <span class="built_in">get_size</span>(<span class="number">0</span>,tmp_pos)&lt;&lt;<span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">               <span class="built_in">COLOR_PRINT</span>(tmp,<span class="number">1</span>);</span><br><span class="line">               tmp_tot ++;</span><br><span class="line">                cout &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tmp_tot == <span class="number">0</span>) cout &lt;&lt;<span class="string">&quot;warning:is null&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find_where</span><span class="params">(string name)</span></span>&#123; <span class="comment">//寻找名称为name的文件和目录</span></span><br><span class="line">    <span class="type">int</span> tmp_tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_directory.<span class="built_in">find</span>(name) == file_directory.<span class="built_in">end</span>())&#123; <span class="comment">//如果找不到，输出提示信息</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;can&#x27;t find!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;<span class="comment">//找到了，遍历进行输出</span></span><br><span class="line">        <span class="type">int</span> x = file_directory[name];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; fid[x].<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(fid[x][i].second == <span class="number">1</span>)&#123;</span><br><span class="line">                cout &lt;&lt; fid[x][i].first &lt;&lt; endl;</span><br><span class="line">                tmp_tot ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找不到，输出错误提示信息</span></span><br><span class="line">        <span class="keyword">if</span>(tmp_tot == <span class="number">0</span>) cout &lt;&lt;<span class="string">&quot;can&#x27;t find!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">manage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string order1,order2;</span><br><span class="line">    <span class="built_in">COLOR_PRINT</span>(<span class="string">&quot;/home/user@LAPTOP-MFH2B9V0:&quot;</span>,<span class="number">2</span>);</span><br><span class="line">    string tmp_st = a[pos].where;</span><br><span class="line">    tmp_st +=<span class="string">&quot;/&quot;</span>;</span><br><span class="line">    tmp_st += a[pos].name;</span><br><span class="line">    <span class="built_in">memset</span>(place, <span class="number">0</span>, <span class="keyword">sizeof</span> place);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; tmp_st.<span class="built_in">size</span>(); i++)&#123;</span><br><span class="line">        place[i] = tmp_st[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">COLOR_PRINT</span>(place,<span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;$ &quot;</span>;</span><br><span class="line">    cin &gt;&gt; order1 &gt;&gt; order2;</span><br><span class="line">    <span class="keyword">if</span>(order1 == <span class="string">&quot;mkdir&quot;</span>)&#123; <span class="comment">//新建目录指令</span></span><br><span class="line">        <span class="built_in">mkdir</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;touch&quot;</span>)&#123;<span class="comment">//新建文件指令</span></span><br><span class="line">        <span class="built_in">touch</span>(order2, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;cd&quot;</span>)&#123;<span class="comment">//打开目录/返回上一级目录</span></span><br><span class="line">        <span class="built_in">open</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;echo&quot;</span>)&#123;<span class="comment">//写入信息到文件中去</span></span><br><span class="line">        <span class="built_in">echo</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;cat&quot;</span>)&#123;<span class="comment">//正向读取文件</span></span><br><span class="line">        <span class="built_in">cat</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;tac&quot;</span>)&#123;<span class="comment">//反向读取文件</span></span><br><span class="line">        <span class="built_in">tac</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;ls&quot;</span>)&#123;<span class="comment">//展示目录中所含的文件、子目录信息</span></span><br><span class="line">        <span class="built_in">show</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(order1 == <span class="string">&quot;find&quot;</span>)&#123;<span class="comment">//按名查找</span></span><br><span class="line">        <span class="built_in">find_where</span>(order2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        cout &lt;&lt;<span class="string">&quot;command &#x27;&quot;</span> &lt;&lt; order1 &lt;&lt;<span class="string">&quot;&#x27; not found&quot;</span> &lt;&lt; endl; <span class="comment">//指令不存在报错</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//一些初始化操作</span></span><br><span class="line">    cout &lt;&lt;<span class="string">&quot;Welcome to OS_work Page (Design Based on Linux)&quot;</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt;endl;</span><br><span class="line">    a[<span class="number">0</span>].name = <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    file_directory[<span class="string">&quot;~/home&quot;</span>] = <span class="number">0</span>;</span><br><span class="line">    a[<span class="number">0</span>].where = <span class="string">&quot;~/home&quot;</span>;</span><br><span class="line">    place[<span class="number">0</span>] = <span class="string">&#x27;~&#x27;</span>;</span><br><span class="line">    <span class="built_in">manage</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>实训</category>
      </categories>
      <tags>
        <tag>实训</tag>
      </tags>
  </entry>
</search>
